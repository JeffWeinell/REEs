best.data[1:10,]
result <- data.table::as.data.table(best.data)
result
.libPaths("/Users/alyssaleinweber/Documents/test_install")
.libPaths
.libPaths()
install.packages(pkgs="BiocManager",repos = "http://cran.us.r-project.org")
find.package("BiocManager")
library(BiocManager)
search()
library(REEs)
Lacerta.agilis_exome <- Biostrings::readDNAStringSet(filepath="/Users/alyssaleinweber/Documents/SequenceCapture-GitHub/Lacerta.agilis_exome_longer120bp.fas")
grep("NC_046313.1:109543642-109543827",names(Lacerta.agilis_exome))
library(devtools)
setwd("Documents/REEs")
devtools::document()
library(REEs)
Lacerta.agilis_exome <- Biostrings::readDNAStringSet(filepath="/Users/alyssaleinweber/Documents/SequenceCapture-GitHub/Lacerta.agilis_exome_longer120bp.fas")
input.seqs=Lacerta.agilis_exome
F1          <- input.seqs
names(F1[1])
names(F1[2])
F2          <- subseq(F1,start=2)
names(F2)
F1          <- input.seqs#
	F2          <- subseq(F1,start=2)#
	F3          <- subseq(F1,start=3)#
	RC1         <- Biostrings::reverseComplement(input.seqs)#
	RC2         <- subseq(RC1,start=2)#
	RC3         <- subseq(RC1,start=3)#
	### Append frame info to sequence names#
	names(F1)   <- paste0(names(F1),"_F1")#
	names(F2)   <- paste0(names(F2),"_F2")#
	names(F3)   <- paste0(names(F3),"_F3")#
	names(RC1)  <- paste0(names(RC1),"_RC1")#
	names(RC2)  <- paste0(names(RC2),"_RC2")#
	names(RC3)  <- paste0(names(RC3),"_RC3")#
	### Calculate subsequence widths that would be divisible by three#
	widths.F1   <- floor(width(F1)/3)*3#
	widths.F2   <- floor(width(F2)/3)*3#
	widths.F3   <- floor(width(F3)/3)*3#
	widths.RC1  <- floor(width(RC1)/3)*3#
	widths.RC2  <- floor(width(RC2)/3)*3#
	widths.RC3  <- floor(width(RC3)/3)*3#
	### Update F1, F2, F3, RC1, RC2, RC3 such that each is divisible by three#
	F1          <- subseq(F1,start=1,end=widths.F1)#
	F2          <- subseq(F2,start=1,end=widths.F2)#
	F3          <- subseq(F3,start=1,end=widths.F3)#
	RC1         <- subseq(RC1,start=1,end=widths.RC1)#
	RC2         <- subseq(RC2,start=1,end=widths.RC2)#
	RC3         <- subseq(RC3,start=1,end=widths.RC3)
names(RC3)[1]
F1 <- input.seqs[1:5]
F2          <- subseq(F1,start=2)#
	F3          <- subseq(F1,start=3)#
	RC1         <- Biostrings::reverseComplement(input.seqs)#
	RC2         <- subseq(RC1,start=2)#
	RC3         <- subseq(RC1,start=3)#
	### Append frame info to sequence names#
	names(F1)   <- paste0(names(F1),"_F1")#
	names(F2)   <- paste0(names(F2),"_F2")#
	names(F3)   <- paste0(names(F3),"_F3")#
	names(RC1)  <- paste0(names(RC1),"_RC1")#
	names(RC2)  <- paste0(names(RC2),"_RC2")#
	names(RC3)  <- paste0(names(RC3),"_RC3")#
	### Calculate subsequence widths that would be divisible by three#
	widths.F1   <- floor(width(F1)/3)*3#
	widths.F2   <- floor(width(F2)/3)*3#
	widths.F3   <- floor(width(F3)/3)*3#
	widths.RC1  <- floor(width(RC1)/3)*3#
	widths.RC2  <- floor(width(RC2)/3)*3#
	widths.RC3  <- floor(width(RC3)/3)*3#
	### Update F1, F2, F3, RC1, RC2, RC3 such that each is divisible by three#
	F1          <- subseq(F1,start=1,end=widths.F1)#
	F2          <- subseq(F2,start=1,end=widths.F2)#
	F3          <- subseq(F3,start=1,end=widths.F3)#
	RC1         <- subseq(RC1,start=1,end=widths.RC1)#
	RC2         <- subseq(RC2,start=1,end=widths.RC2)#
	RC3         <- subseq(RC3,start=1,end=widths.RC3)
result.list <- lapply(X=c(1:length(input.seqs)),FUN=function(x){temp.seqs = suppressWarnings(Biostrings::translate(c(F1[x],F2[x],F3[x],RC1[x],RC2[x],RC3[x]))); counts.temp = REEs::countChars(as.character(temp.seqs),pattern="\\*"); temp.seqs[which(counts.temp==min(counts.temp))]})
result.list <- lapply(X=c(1:5),FUN=function(x){temp.seqs = suppressWarnings(Biostrings::translate(c(F1[x],F2[x],F3[x],RC1[x],RC2[x],RC3[x]))); counts.temp = REEs::countChars(as.character(temp.seqs),pattern="\\*"); temp.seqs[which(counts.temp==min(counts.temp))]})
result.list
result.list <- lapply(X=c(1:length(input.seqs)),FUN=function(x){temp.seqs = suppressWarnings(Biostrings::translate(c(F1[x],F2[x],F3[x],RC1[x],RC2[x],RC3[x]))); temp.seqs})
result.list <- lapply(X=c(1:5),FUN=function(x){temp.seqs = suppressWarnings(Biostrings::translate(c(F1[x],F2[x],F3[x],RC1[x],RC2[x],RC3[x]))); temp.seqs})
result.list
result      <- REEs::collapse.DNAStringSet(result.list)
result
names(result)
names(result) <- gsub("_$","",result)
names(result)
getwd()
devtools::document()
translate.exome
devtools::load_all()
translate.exome
translate.exome(Lacerta.agilis_exome[1:5])
test <- translate.exome(Lacerta.agilis_exome[1:5])
names(test)
grep("\\*.",test)
devtools::document()
translate.exome
test <- translate.exome(Lacerta.agilis_exome[1:5])
test
names(test)
writeXStringSet(test,"/Users/alyssaleinweber/Documents/SequenceCapture-GitHub/Lacerta.agilis_five.translated.CDS.fas")
hits <- fread("/Users/alyssaleinweber/Downloads/2S7YUFVC013-Alignment-HitTable.txt")
hits
ncol(hits)
length(c("qseqid","sseqid","pident","length","mismatch","gapopen","qstart","qend","sstart","send","evalue","bitscore"))
hits <- hits[,1:12]
hits
colnames(hits) <- c("qseqid","sseqid","pident","length","mismatch","gapopen","qstart","qend","sstart","send","evalue","bitscore")
hits
hits$qseqid <- mgsub(c("_F1$","_F2$","_F3$","_RC1$","_RC2$","_RC3$"),c("","","","","",""),hits$qseqid)
hits <- fread("/Users/alyssaleinweber/Downloads/2S7YUFVC013-Alignment-HitTable.txt")
devtoos::document()
devtools::document()
devtools::document()
best.hits <- reportBestMatches(input.table=6,blast.method="tblastn")
class(hits)
input.table=hits
hits
is(input.table,"data.table")
hits2 <- as.data.frame(hits)
nrow(hits2)
hits2[1:10,]
devtools::document()
best.hits <- reportBestMatches(input.table=hits,blast.method="tblastn")
nrow(best.hits)
best.hits
best.hits2 <- reportBestMatches(input.table=hits,blast.method=NULL)
devtools::document()
best.hits <- reportBestMatches(input.table=hits,blast.method="tblastn")
best.hits
best.hits2 <- reportBestMatches(input.table=hits,blast.method=NULL)
nrow(best.hits2)
best.hits2
substitution_matrices
substitution_matrices()
Biostrings::substitution_matrices()
Biostrings::data(BLOSUM62)
data(BLOSUM62)
BLOSUM62
diag(BLOSUM62)
class(diag(BLOSUM62))
sum(diag(BLOSUM62))
test[1]
length(test)
test[1]
test2 <- unlist(strsplit(as.character(test),split=""))
test2
test2 <- unlist(strsplit(as.character(test[1]),split=""))
test2
names(test2) <- NULL
test2
diag(BLOSUM62)
test3 <- mgsub(names(diag(BLOSUM62)),diag(BLOSUM62),test2)
test3
test3 <- as.numeric(mgsub(names(diag(BLOSUM62)),diag(BLOSUM62),test2))
test3
sum(test3)
scores.diag <- diag(BLOSUM62)
scores.diag
raw.score <- function(input.seqs,method="BLOSUM62"){#
	if(method=="BLOSUM62"){#
		data(BLOSUM62)#
		scores.diag <- diag(BLOSUM62)#
	}#
	AA.list <- lapply(X=c(1:length(input.seqs)),FUN=function(x){unlist(strsplit(as.character(x)))})#
	result.list <- lapply(X=c(1:length(AA.list)),FUN=function(x){sum(as.numeric(mgsub(names(scores.diag),scores.diag,x)))})#
	result <- unlist(result)#
	names(result) <- names(input.seqs)#
	result#
}
raw.score(input.seqs=test)
raw.score <- function(input.seqs,method="BLOSUM62"){#
	if(method=="BLOSUM62"){#
		data(BLOSUM62)#
		scores.diag <- diag(BLOSUM62)#
	}#
	AA.list <- lapply(X=c(1:length(input.seqs)),FUN=function(x){unlist(strsplit(as.character(x),split=""))})#
	result.list <- lapply(X=c(1:length(AA.list)),FUN=function(x){sum(as.numeric(mgsub(names(scores.diag),scores.diag,x)))})#
	result <- unlist(result)#
	names(result) <- names(input.seqs)#
	result#
}
raw.score(input.seqs=test)
names(test)
rownames(test)
raw.score <- function(input.seqs,method="BLOSUM62"){#
	if(method=="BLOSUM62"){#
		data(BLOSUM62)#
		scores.diag <- diag(BLOSUM62)#
	}#
	AA.list <- lapply(X=c(1:length(input.seqs)),FUN=function(x){unlist(strsplit(as.character(x),split=""))})#
	result.list <- lapply(X=c(1:length(AA.list)),FUN=function(x){sum(as.numeric(mgsub(names(scores.diag),scores.diag,x)))})#
	result <- unlist(result)#
	names(result) <- Biostrings::names(input.seqs)#
	result#
}
raw.score(input.seqs=test)
raw.score <- function(input.seqs,method="BLOSUM62"){#
	seqnames <- names(input.seqs)#
	if(method=="BLOSUM62"){#
		data(BLOSUM62)#
		scores.diag <- diag(BLOSUM62)#
	}#
	AA.list <- lapply(X=c(1:length(input.seqs)),FUN=function(x){unlist(strsplit(as.character(x),split=""))})#
	result.list <- lapply(X=c(1:length(AA.list)),FUN=function(x){sum(as.numeric(mgsub(names(scores.diag),scores.diag,x)))})#
	result <- unlist(result)#
	names(result) <- seqnames#
	result#
}
raw.score(input.seqs=test)
input.seqs=test;method="BLOSUM62"
seqnames <- names(input.seqs)
method=="BLOSUM62"
if(method=="BLOSUM62"){#
		data(BLOSUM62)#
		scores.diag <- diag(BLOSUM62)#
	}
scores.diag
AA.list <- lapply(X=c(1:length(input.seqs)),FUN=function(x){unlist(strsplit(as.character(x),split=""))})
AA.list
AA.list <- lapply(X=c(1:length(input.seqs)),FUN=function(x){unlist(strsplit(as.character(input.seqs[x]),split=""))})
AA.list
result.list <- lapply(X=c(1:length(AA.list)),FUN=function(x){sum(as.numeric(mgsub(names(scores.diag),scores.diag,x)))})
result.list
result.list <- lapply(X=c(1:length(AA.list)),FUN=function(x){sum(as.numeric(mgsub(names(scores.diag),scores.diag,AA.list[x])))})
result.list <- lapply(X=c(1:length(AA.list)),FUN=function(x){sum(as.numeric(mgsub(names(scores.diag),scores.diag,AA.list[[x]])))})
c(1:length(AA.list))
sum(as.numeric(mgsub(names(scores.diag),scores.diag,AA.list[[1]])))
sum(as.numeric(mgsub(names(scores.diag),scores.diag,AA.list[[2]])))
sum(as.numeric(mgsub(names(scores.diag),scores.diag,AA.list[[3]])))
sum(as.numeric(mgsub(names(scores.diag),scores.diag,AA.list[[4]])))
sum(as.numeric(mgsub(names(scores.diag),scores.diag,AA.list[[5]])))
sum(as.numeric(mgsub(names(scores.diag),scores.diag,AA.list[[6]])))
result.list <- lapply(X=c(1:length(AA.list)),FUN=function(x){res=sum(as.numeric(mgsub(names(scores.diag),scores.diag,AA.list[[x]])));res})
result.list
sum(as.numeric(mgsub(names(scores.diag),scores.diag,AA.list[[8]])))
AA.list[[8]]
mgsub(names(scores.diag),scores.diag,AA.list[[8]])
scores.diag
names(scores.diag)
class(names(scores.diag))
gsub
gsub("*","\\*","*")
gsub("\\*","\\*","*")
gsub("\\*","\\\\*","*")
gsub("\\*","\\\\*",names(scores.diag))
raw.score <- function(input.seqs,method="BLOSUM62"){#
	seqnames <- names(input.seqs)#
	if(method=="BLOSUM62"){#
		data(BLOSUM62)#
		scores.diag <- diag(BLOSUM62)#
		gsub("\\*","\\\\*",names(scores.diag))#
	}#
	AA.list     <- lapply(X=c(1:length(input.seqs)),FUN=function(x){unlist(strsplit(as.character(input.seqs[x]),split=""))})#
	result.list <- lapply(X=c(1:length(AA.list)),FUN=function(x){res=sum(as.numeric(mgsub(names(scores.diag),scores.diag,AA.list[[x]])));res})#
	result <- unlist(result)#
	names(result) <- seqnames#
	result#
}
raw.score(test)
AA.list
AA.list[[8]]
raw.score <- function(input.seqs,method="BLOSUM62"){#
	seqnames <- names(input.seqs)#
	if(method=="BLOSUM62"){#
		data(BLOSUM62)#
		scores.diag <- diag(BLOSUM62)#
		names(scores.diag) <- gsub("\\*","\\\\*",names(scores.diag))#
	}#
	AA.list     <- lapply(X=c(1:length(input.seqs)),FUN=function(x){unlist(strsplit(as.character(input.seqs[x]),split=""))})#
	result.list <- lapply(X=c(1:length(AA.list)),FUN=function(x){res=sum(as.numeric(mgsub(names(scores.diag),scores.diag,AA.list[[x]])));res})#
	result <- unlist(result)#
	names(result) <- seqnames#
	result#
}
raw.score(test)
input.seqs
seqnames <- names(input.seqs)#
	if(method=="BLOSUM62"){#
		data(BLOSUM62)#
		scores.diag <- diag(BLOSUM62)#
		names(scores.diag) <- gsub("\\*","\\\\*",names(scores.diag))#
	}#
	AA.list     <- lapply(X=c(1:length(input.seqs)),FUN=function(x){unlist(strsplit(as.character(input.seqs[x]),split=""))})#
	result.list <- lapply(X=c(1:length(AA.list)),FUN=function(x){res=sum(as.numeric(mgsub(names(scores.diag),scores.diag,AA.list[[x]])));res})
result.list
AA.list
sum(as.numeric(mgsub(names(scores.diag),scores.diag,AA.list[[1]])))
as.numeric(mgsub(names(scores.diag),scores.diag,AA.list[[x]]))
as.numeric(mgsub(names(scores.diag),scores.diag,AA.list[[1]]))
as.numeric(mgsub(names(scores.diag),scores.diag,AA.list[[2]]))
as.numeric(mgsub(names(scores.diag),scores.diag,AA.list[[3]]))
as.numeric(mgsub(names(scores.diag),scores.diag,AA.list[[4]]))
as.numeric(mgsub(names(scores.diag),scores.diag,AA.list[[8]]))
result.list
result <- unlist(result)
result
result <- unlist(result.list)
result
names(result) <- seqnames
result
raw.score <- function(input.seqs,method="BLOSUM62"){#
	seqnames <- names(input.seqs)#
	if(method=="BLOSUM62"){#
		data(BLOSUM62)#
		scores.diag <- diag(BLOSUM62)#
		names(scores.diag) <- gsub("\\*","\\\\*",names(scores.diag))#
	}#
	AA.list     <- lapply(X=c(1:length(input.seqs)),FUN=function(x){unlist(strsplit(as.character(input.seqs[x]),split=""))})#
	result.list <- lapply(X=c(1:length(AA.list)),FUN=function(x){sum(as.numeric(mgsub(names(scores.diag),scores.diag,AA.list[[x]])))})#
	result <- unlist(result.list)#
	names(result) <- seqnames#
	result#
}
raw.score(test)
reportBestMatches(hits)
best.hits2
order(best.hits2$bitscore)
order(raw.score(test))
best.hits2$qseqid
match(best.hits2$qseqid,names(raw.score(test)))
best.hits2[match(best.hits2$qseqid,names(raw.score(test))),]
table.bitscore <- best.hits2[match(best.hits2$qseqid,names(raw.score(test))),"bitscore"]
table.bitscore
order(raw.score(test))
order(table.bitscore)
best.hits2[match(best.hits2$qseqid,names(raw.score(test))),]
raw.score(test)
data(get("BLOSUM62"))
x <- data(BLOSUM62)
x
data(BLOSUM62,BLOSUM45)
BLOSUM45
get("BLOSUM45")
method="BLOSUM62"
get(method)
data(BLOSUM45, BLOSUM50, BLOSUM62, BLOSUM80, BLOSUM90, PAM250, PAM30, PAM70)
data(BLOSUM45, BLOSUM50, BLOSUM62, BLOSUM80, PAM250, PAM30, PAM70)
devtools::document()
rm(list = c("raw.score"))
devtools::document()
raw.score(input.seqs=test,method="BLOSUM45")
raw.score(input.seqs=test,method="BLOSUM62")
devtools::document()
best.hits2[match(best.hits2$qseqid,names(raw.score(test))),]
raw.score(input.seqs=test,method="BLOSUM62")
hits.all <- Biostrings::readAAStringSet("/Users/alyssaleinweber/Documents/SequenceCapture-GitHub/Lacerta.agilis_translated.exome_longer120bp.fas")
Lacerta.agilis.translated.exome <- hits.all
Lacerta.agilis.translated.exome
result    <- Lacerta.agilis.translated.exome[-grep("\\*.",Lacerta.agilis.translated.exome)]
length(result)
result
devtools::document()
Lacerta.agilis_exome
test100 <- translate.exome(Lacerta.agilis_exome[1:100])
test1000 <- translate.exome(Lacerta.agilis_exome[1:1000])
48.64778*108
(48.64778*108)/60
Lacerta.agilis_translated.10to20K <- readAAStringSet("/Users/alyssaleinweber/Downloads/Lacerta.agilis_translated.exome_longer120bp_10Kto20K.InputSeqs.fas")
Lacerta.agilis_translated.10to20K
length(unique(names(Lacerta.agilis_translated.10to20K)))
names(Lacerta.agilis_translated.10to20K)[1:10]
137311/6
length(unique(mgsub(c("_F1$","_F2$","_F3$","_RC1$","_RC2$","_RC3$"),rep("",6),names(Lacerta.agilis_translated.10to20K))))
Lacerta.agilis_translated.100K <- readAAStringSet("/Users/alyssaleinweber/Downloads/Lacerta.agilis_translated.exome_longer120bp_100000InputSeqs.fas")
length(unique(mgsub(c("_F1$","_F2$","_F3$","_RC1$","_RC2$","_RC3$"),rep("",6),names(Lacerta.agilis_translated.100K))))
blast.install()
test.tblastn <- blast(method="tblastn",subject=Lacerta.agilis.genome_url,query=Lacerta.agilis_translated.100K[1:10])
Lacerta.agilis.genome_url          <- "https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/009/819/535/GCF_009819535.1_rLacAgi1.pri/GCF_009819535.1_rLacAgi1.pri_genomic.fna.gz"
test.tblastn <- blast(method="tblastn",subject=Lacerta.agilis.genome_url,query=Lacerta.agilis_translated.100K[1:10])
class(Lacerta.agilis_exome)
is(Lacerta.agilis_exome,"DNAStringSet")
is(Lacerta.agilis_exome,"XStringSet")
is(Lacerta.agilis_exome,"AAStringSet")
is(Lacerta.agilis_translated.100K,"XStringSet")
"XStringSet" %in% class(Lacerta.agilis_translated.100K)
is(Lacerta.agilis_translated.100K,"XStringSet")
getwd()
devtools::document()
devtools::document()
library(BiocManager)
BiocManager::install("JeffWeinell/REEs",update=FALSE, version="3.12",dependencies=c("Depends", "Imports", "LinkingTo"),build_vignettes=F,Ncpus=4,auth_token="323d9e4cd00247a39a805dbb66f37db6403cfb8b")
library(REEs)
blast.install()
