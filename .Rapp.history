names(test["a"])
names(test[["a"]])
a=c(1:3);b=c(1:4);c=c(1:5)
names(a) <- c("one","two","three")
names(b) <- c("one","two","three","four")
names(c) <- c("one","two","three","four","five")
test <- list(a,b,c)
names(test)
test
test <- list(a=a,b=b,c=c)
test
names(test)
names(test[['a']])
names(test[['b']])
names(test[['b']])
names(test[['c']])
igraph::clusters
expand.grid(1:3,1:3)
COMBOS<-expand.grid(1:3,1:3)
COMBOS[which(COMBOS[,1]>COMBOS[,2]),]
as.matrix(#
1 2#
3 4#
)
infiles  <- unlist(strsplit('/panfs/pfs.local/home/j926w878/scratch/scratch_v4/SequenceCapture/SnakeCap_AllSamples/blast_database11/groupAlignments_SeqCapAndTargetRef_max100Seqs/group1.fasta /panfs/pfs.local/home/j926w878/scratch/scratch_v4/SequenceCapture/SnakeCap_AllSamples/blast_database11/groupAlignments_SeqCapAndTargetRef_max100Seqs/group2.fasta /panfs/pfs.local/home/j926w878/scratch/scratch_v4/SequenceCapture/SnakeCap_AllSamples/blast_database11/groupAlignments_SeqCapAndTargetRef_max100Seqs/group3.fasta /panfs/pfs.local/home/j926w878/scratch/scratch_v4/SequenceCapture/SnakeCap_AllSamples/blast_database11/groupAlignments_SeqCapAndTargetRef_max100Seqs/group4.fasta /panfs/pfs.local/home/j926w878/scratch/scratch_v4/SequenceCapture/SnakeCap_AllSamples/blast_database11/groupAlignments_SeqCapAndTargetRef_max100Seqs/group5.fasta',split=' '))
infiles
A=c(1,3); B=c(12,14); C=c(2,4); D=c(13,15); E=c(5,10)
dat=cbind(A,B,C,D,E)
dat
dat=rbind(A,B,C,D,E)
dat
data.frame(text="#
A 1 3 #
C 2 4 #
E 5 10#
B 12 14#
D 13 15#
")
data.frame(text="#
A 1 3 #
C 2 4 #
E 5 10#
B 12 14#
D 13 15#
",stringsAsFactors=F)
data.frame(text="#
A 1 3 #
C 2 4 #
E 5 10#
B 12 14#
D 13 15#
",stringsAsFactors=F,sep=" "")
data.frame(text="#
A 1 3 #
C 2 4 #
E 5 10#
B 12 14#
D 13 15#
",stringsAsFactors=F,sep=" ")
library(REEs)
is.overlap(A,B)
A
B
is.overlap(dat[1,],dat[2,])
is.overlap(dat[1,],dat[3,])
if(is.overlap(dat[1,],dat[3,])) range(dat[c(1,3),])
?merge()
?merge
mergedRange <- function(r1,r2){#
	if(is.overlap(r1,r2)) {#
		range(c(r1,r2))#
	} else {#
		NA#
	}#
}
mergedRange(dat[1,],dat[3,])
read.table(text="#
A 1 3 #
C 2 4 #
E 5 10#
B 12 14#
D 13 15#
",sep=" ")
read.table(text="#
A 1 3#
C 2 4#
E 5 10#
B 12 14#
D 13 15#
",sep=" ")
read.table(text="#
A 1 3#
C 2 4#
E 5 10#
B 12 14#
D 13 15#
",sep=" ",row.names=T,col.names=F)
read.table(text="#
A 1 3#
C 2 4#
E 5 10#
B 12 14#
D 13 15#
",sep=" ",row.names=T,header=F)
read.table(text="#
A 1 3#
C 2 4#
E 5 10#
B 12 14#
D 13 15#
",sep=" ",check.names=T,header=F)
read.table(text="#
A 1 3#
C 2 4#
E 5 10#
B 12 14#
D 13 15#
",sep=" ",row.names=1,header=F)
read.table(text="#
A 1 3#
C 2 4#
E 5 10#
B 12 14#
D 13 15#
",sep=" ",header=F,row.names=1)
data <- read.table(text="#
A 1 3#
C 2 4#
E 5 10#
B 12 14#
D 13 15#
",sep=" ",header=F,row.names=1)
data
data2 <- data.frame(NA,nrow=nrow(data),ncol=ncol(data))
data2
data2 <- matrix(data=NA,nrow=nrow(data),ncol=ncol(data))
data2
data2[1,] <- data[1,]
data2
data <- as.matrix(read.table(text="#
A 1 3#
C 2 4#
E 5 10#
B 12 14#
D 13 15#
",sep=" ",header=F,row.names=1))
data
data2 <- matrix(NA,ncol=ncol(data),nrow=nrow(data))
data2
data2[1,] <- data[1,]
data2
rownames(data2)[1] <- rownames(data)[1]
data2 <- list(); length(data2) <- nrow(data)
data2
names(data2)
names(data2)[1]
names(data2)[1] <- rownames(data)[1]
data2
data2[[1]] <- data[1,]
data2
set1 <- data[,1] > data[,2]
set1
set1 <- data[c(data[,1] > data[,2]),]
set1
set1 <- data[c(data[,1] < data[,2]),c(1,2)]#
set2 <- data[c(data[,1] > data[,2]),c(2,1)]
cbind(set1,set2)
set1
rbind(set1,set2)
df1 <- rbind(data[c(data[,1] < data[,2]),c(1,2)],data[c(data[,1] > data[,2]),c(2,1)])
df1
sort(df1)
order(df1[,1],df1[,2])
df1[order(df1[,1],df1[,2]),]
data <- as.matrix(read.table(text="#
A 1 3#
B 12 14#
C 2 4#
D 13 15#
E 5 10#
",sep=" ",header=F,row.names=1))
data
order(df1)
order(df1,"shell")
order(df1,method="shell")
order(df1[],method="shell")
order(df1,method="radix")
order(df1[,1],method="radix")
order(df1[,2],method="radix")
order(df1[,c(1:ncol(df1))],method="radix")
df1[,c(1:ncol(df1))]
order(df1[,c(1:ncol(df1))],method="shell")
order(df1[,1],df1[,2],method="shell")
system(df1)
system(sprintf("echo %s"),df1)
system(sprintf("echo %s",df1),intern=T)
text(df1)
print(df1)
system(print(df1))
c(df1)
paste(df1)
paste(df1,recycle=T)
system(sprintf("sort %s",df1))
sprintf("sort %s",df1)
write(df1)
data <- as.matrix(read.table(text="#
A 1 3#
B 12 14#
C 2 4#
D 13 15#
E 5 10#
",sep=" ",header=F,row.names=1))
# sorts values in rows such that column 1 values are less those in column 2#
df1 <- rbind(data[c(data[,1] < data[,2]),c(1,2)],data[c(data[,1] > data[,2]),c(2,1)])#
# sorts rows by first column and then by successive columns to break ties#
df2 <- df1[do.call(order, as.list(df1)),]
df2
do.call(order, as.list(df1))
data
df1
as.list(df1)
as.list(df1)
list(df1)
length(df1)
class(df1)
data <- read.table(text="#
A 1 3#
B 12 14#
C 2 4#
D 13 15#
E 5 10#
",sep=" ",header=F,row.names=1)
# sorts values in rows such that column 1 values are less those in column 2#
df1 <- rbind(data[c(data[,1] < data[,2]),c(1,2)],data[c(data[,1] > data[,2]),c(2,1)])#
# sorts rows by first column and then by successive columns to break ties#
df2 <- df1[do.call(order, as.list(df1)),]
df2
res=matrix(df2)
res
res=matrix(ncol=df2)
res=matrix(dim=dim(df2))
res=matrix(nrow=nrow(df2),ncol=ncol(df2))
res
res=list(length=nrow(df2))
res
res=list(); length(res) <- nrow(df2)
res
names(res)[1] <- rownames(df2)[1]
res
res[[1]] <- df2[1,]
res
res=list(); length(res) <- nrow(df2)
res
res[[1]] <- df2[1,]
res
res=list(); length(res) <- nrow(df2)#
names(res)[1] <- rownames(df2)[1]#
res[[1]] <- df2[1,]
mergedRange <- function(r1,r2){#
	if(is.overlap(r1,r2)) {#
		range(c(r1,r2))#
	} else {#
		r2#
	}#
}
mergedRange(df2[1,],df[2,])
df2[1,]
df[2,]
mergedRange(df2[1,],df2[2,])
i=2
mergedRange(res[[(i-1)]],df2[i,])
res[[i]] <- mergedRange(res[[(i-1)]],df2[i,])
res
res=list(); length(res) <- nrow(df2)#
names(res)[1] <- rownames(df2)[1]#
res[[1]] <- unname(df2[1,])
res
unname(df2[1,])
unname(df2[1,],force=T)
df2[1,]
dimnames(df2[1,])
unname(df2[1,],force=T)
test <- unname(df2[1,],force=T)
test <- unname(df2,force=T)
res1 <- df2[1,]#
dimnames(res1) <- NULL#
res[[1]] <- res1
dimnames(res1)
dimnames(res1) <- NILL
dimnames(res1) <- NULL
dimnames(res1) <- ""
dimnames(res1) <- NA
rownames(res1)
rownames(res1) <- NULL
res1 <- unname(df2[1,])#
rownames(res1) <- NULL
res1
unname(c(df2[1,]))
unname(unlist(df2[1,]))
res[[1]] <- unname(unlist(df2[1,]))
res
res[[1]] <- unname(unlist(df2[1,]))
res=list(); length(res) <- nrow(df2)#
names(res)[1] <- rownames(df2)[1]#
res[[1]] <- unname(unlist(df2[1,]))#
for(2 in 1:nrow(df2)){#
	res[[i]] <- mergedRange(res[[(i-1)]],df2[i,])#
	if(is.overlap(res[[(i-1)]],df2[i,])){#
		names(res)[[i]] <- paste(rownames(df2)[i],names(res)[[i-1]])#
	} else {#
		names(res)[[i]] <- rownames(df2)[i]#
	}#
}
i=2
paste(rownames(df2)[i],names(res)[[i-1]])
res=list(); length(res) <- nrow(df2)#
names(res)[1] <- rownames(df2)[1]#
res[[1]] <- unname(unlist(df2[1,]))
i=2
res
res[[i]] <- mergedRange(res[[(i-1)]],df2[i,])
res
if(TRUE){#
		"yes"#
	} else {#
		"no"#
	}
is.overlap(res[[(i-1)]],df2[i,])
names(res)[[i]] <- paste(rownames(df2)[i],names(res)[[i-1]])
res=list(); length(res) <- nrow(df2)#
names(res)[1] <- rownames(df2)[1]#
res[[1]] <- unname(unlist(df2[1,]))#
for(2 in 1:nrow(df2)){#
	res[[i]] <- mergedRange(res[[(i-1)]],df2[i,])#
	if(is.overlap(res[[(i-1)]],df2[i,])) {#
		names(res)[[i]] <- paste(rownames(df2)[i],names(res)[[i-1]])#
	} else {#
		names(res)[[i]] <- rownames(df2)[i]#
	}#
}
res=list(); length(res) <- nrow(df2)#
names(res)[1] <- rownames(df2)[1]#
res[[1]] <- unname(unlist(df2[1,]))#
for(i in 2:nrow(df2)){#
	res[[i]] <- mergedRange(res[[(i-1)]],df2[i,])#
	if(is.overlap(res[[(i-1)]],df2[i,])) {#
		names(res)[[i]] <- paste(rownames(df2)[i],names(res)[[i-1]])#
	} else {#
		names(res)[[i]] <- rownames(df2)[i]#
	}#
}
res
res=list(); length(res) <- nrow(df2)#
names(res)[1] <- rownames(df2)[1]#
res[[1]] <- unname(unlist(df2[1,]))#
for(i in 2:nrow(df2)){#
	res[[i]] <- mergedRange(res[[(i-1)]],df2[i,])#
	if(is.overlap(res[[(i-1)]],df2[i,])) {#
		names(res)[[i]] <- paste(rownames(df2)[i],names(res)[[i-1]])#
		res[[(i-1)]] <- NULL#
	} else {#
		names(res)[[i]] <- rownames(df2)[i]#
	}#
}
res=list(); length(res) <- nrow(df2)#
names(res)[1] <- rownames(df2)[1]#
res[[1]] <- unname(unlist(df2[1,]))#
for(i in 2:nrow(df2)){#
	res[[i]] <- mergedRange(res[[(i-1)]],df2[i,])#
	if(is.overlap(res[[(i-1)]],df2[i,])) {#
		names(res)[[i]] <- paste(rownames(df2)[i],names(res)[[i-1]])#
		res[[(i-1)]] <- NA#
	} else {#
		names(res)[[i]] <- rownames(df2)[i]#
	}#
}
res
lapply(res,is.na)
lapply(res,function(x){all(is.na(x))})
sapply(res,function(x){all(is.na(x))})
intervalSets <- res[sapply(res,function(x){all(is.na(x))})]
intervalSets
intervalSets <- res[!sapply(res,function(x){all(is.na(x))})]
intervalSets
intervalSets <- do.call(rbind,res[!sapply(res,function(x){all(is.na(x))})])
intervalSets
cbind(rownames(intervalSets),intervalSets)
colnames(intervalSets.mat) <- NULL
intervalSets.mat <- cbind(rownames(intervalSets),intervalSets)#
	colnames(intervalSets.mat) <- NULL
intervalSets.mat
dimnames(intervalSets.mat) <- NULL
class(intervalSets.mat)
intervalSets.mat <- as.matrix(cbind(rownames(intervalSets),intervalSets))
intervalSets.mat
dimnames(intervalSets.mat) <- NULL
intervalSets.mat
as.data.frame(intervalSets.mat)
function(data){#
	# sorts values in rows such that column 1 values are less those in column 2#
	df1 <- rbind(data[c(data[,1] < data[,2]),c(1,2)],data[c(data[,1] > data[,2]),c(2,1)])#
	# sorts rows by first column and then by successive columns to break ties#
	df2 <- df1[do.call(order, as.list(df1)),]#
	res=list(); length(res) <- nrow(df2)#
	names(res)[1] <- rownames(df2)[1]#
	res[[1]] <- unname(unlist(df2[1,]))#
	for(i in 2:nrow(df2)){#
		res[[i]] <- mergedRange(res[[(i-1)]],df2[i,])#
		if(is.overlap(res[[(i-1)]],df2[i,])) {#
			names(res)[[i]] <- paste(rownames(df2)[i],names(res)[[i-1]],sep=",")#
			res[[(i-1)]] <- NA#
		} else {#
			names(res)[[i]] <- rownames(df2)[i]#
		}#
	}#
	intervalSets     <- do.call(rbind,res[!sapply(res,function(x){all(is.na(x))})])#
	result.df <- as.data.frame(unname(as.matrix(cbind(rownames(intervalSets),intervalSets))))#
	result.df#
}
clusterIntervals <- function(data){#
	# sorts values in rows such that column 1 values are less those in column 2#
	df1 <- rbind(data[c(data[,1] < data[,2]),c(1,2)],data[c(data[,1] > data[,2]),c(2,1)])#
	# sorts rows by first column and then by successive columns to break ties#
	df2 <- df1[do.call(order, as.list(df1)),]#
	res=list(); length(res) <- nrow(df2)#
	names(res)[1] <- rownames(df2)[1]#
	res[[1]] <- unname(unlist(df2[1,]))#
	for(i in 2:nrow(df2)){#
		res[[i]] <- mergedRange(res[[(i-1)]],df2[i,])#
		if(is.overlap(res[[(i-1)]],df2[i,])) {#
			names(res)[[i]] <- paste(rownames(df2)[i],names(res)[[i-1]],sep=",")#
			res[[(i-1)]] <- NA#
		} else {#
			names(res)[[i]] <- rownames(df2)[i]#
		}#
	}#
	intervalSets     <- do.call(rbind,res[!sapply(res,function(x){all(is.na(x))})])#
	result.df <- as.data.frame(unname(as.matrix(cbind(rownames(intervalSets),intervalSets))))#
	result.df#
}
clusterIntervals(data=data)
clusterIntervals <- function(data){#
	# sorts values in rows such that column 1 values are less those in column 2#
	df1 <- rbind(data[c(data[,1] < data[,2]),c(1,2)],data[c(data[,1] > data[,2]),c(2,1)])#
	# sorts rows by first column and then by successive columns to break ties#
	df2 <- df1[do.call(order, as.list(df1)),]#
	res=list(); length(res) <- nrow(df2)#
	names(res)[1] <- rownames(df2)[1]#
	res[[1]] <- unname(unlist(df2[1,]))#
	for(i in 2:nrow(df2)){#
		res[[i]] <- mergedRange(res[[(i-1)]],df2[i,])#
		if(is.overlap(res[[(i-1)]],df2[i,])) {#
			names(res)[[i]] <- paste(rownames(df2)[i],names(res)[[i-1]],sep=",")#
			res[[(i-1)]] <- NA#
		} else {#
			names(res)[[i]] <- rownames(df2)[i]#
		}#
	}#
	intervalSets        <- do.call(rbind,res[!sapply(res,function(x){all(is.na(x))})])#
	result.df           <- as.data.frame(unname(as.matrix(cbind(rownames(intervalSets),intervalSets))))#
	colnames(result.df) <- c("merged","start","end")#
	result.df#
}
clusterIntervals(data=data)
clusterIntervals <- function(data){#
	# sorts values in rows such that column 1 values are less those in column 2#
	df1 <- rbind(data[c(data[,1] < data[,2]),c(1,2)],data[c(data[,1] > data[,2]),c(2,1)])#
	# sorts rows by first column and then by successive columns to break ties#
	df2 <- df1[do.call(order, as.list(df1)),]#
	res=list(); length(res) <- nrow(df2)#
	names(res)[1] <- rownames(df2)[1]#
	res[[1]] <- unname(unlist(df2[1,]))#
	for(i in 2:nrow(df2)){#
		res[[i]] <- mergedRange(res[[(i-1)]],df2[i,])#
		if(is.overlap(res[[(i-1)]],df2[i,])) {#
			names(res)[[i]] <- paste(sort(rownames(df2)[i],names(res)[[i-1]]),sep=",")#
			res[[(i-1)]] <- NA#
		} else {#
			names(res)[[i]] <- rownames(df2)[i]#
		}#
	}#
	intervalSets        <- do.call(rbind,res[!sapply(res,function(x){all(is.na(x))})])#
	result.df           <- as.data.frame(unname(as.matrix(cbind(rownames(intervalSets),intervalSets))))#
	colnames(result.df) <- c("merged","start","end")#
	result.df#
}
clusterIntervals(data=data)
clusterIntervals <- function(data){#
	# sorts values in rows such that column 1 values are less those in column 2#
	df1 <- rbind(data[c(data[,1] < data[,2]),c(1,2)],data[c(data[,1] > data[,2]),c(2,1)])#
	# sorts rows by first column and then by successive columns to break ties#
	df2 <- df1[do.call(order, as.list(df1)),]#
	res=list(); length(res) <- nrow(df2)#
	names(res)[1] <- rownames(df2)[1]#
	res[[1]] <- unname(unlist(df2[1,]))#
	for(i in 2:nrow(df2)){#
		res[[i]] <- mergedRange(res[[(i-1)]],df2[i,])#
		if(is.overlap(res[[(i-1)]],df2[i,])) {#
			names(res)[[i]] <- paste(sort(c(rownames(df2)[i],names(res)[[i-1]])),sep=",")#
			res[[(i-1)]] <- NA#
		} else {#
			names(res)[[i]] <- rownames(df2)[i]#
		}#
	}#
	intervalSets        <- do.call(rbind,res[!sapply(res,function(x){all(is.na(x))})])#
	result.df           <- as.data.frame(unname(as.matrix(cbind(rownames(intervalSets),intervalSets))))#
	colnames(result.df) <- c("merged","start","end")#
	result.df#
}
clusterIntervals(data=data)
clusterIntervals <- function(data){#
	# sorts values in rows such that column 1 values are less those in column 2#
	df1 <- rbind(data[c(data[,1] < data[,2]),c(1,2)],data[c(data[,1] > data[,2]),c(2,1)])#
	# sorts rows by first column and then by successive columns to break ties#
	df2 <- df1[do.call(order, as.list(df1)),]#
	res=list(); length(res) <- nrow(df2)#
	names(res)[1] <- rownames(df2)[1]#
	res[[1]] <- unname(unlist(df2[1,]))#
	for(i in 2:nrow(df2)){#
		res[[i]] <- mergedRange(res[[(i-1)]],df2[i,])#
		if(is.overlap(res[[(i-1)]],df2[i,])) {#
			names(res)[[i]] <- paste(rownames(df2)[i],names(res)[[i-1]],sep=",")#
			res[[(i-1)]] <- NA#
		} else {#
			names(res)[[i]] <- rownames(df2)[i]#
		}#
	}#
	intervalSets        <- do.call(rbind,res[!sapply(res,function(x){all(is.na(x))})])#
	result.df           <- as.data.frame(unname(as.matrix(cbind(rownames(intervalSets),intervalSets))))#
	colnames(result.df) <- c("merged","start","end")#
	result.df#
}
clusterIntervals(data=data)
mergedRange <- function(r1,r2,ifFALSE=NA){#
	if(is.overlap(r1,r2)) {#
		range(c(r1,r2))#
	} else {#
		if(all(is.na(ifFALSE))) {#
			return(NA)#
		}#
		if(all(ifFALSE==1)) {#
			return(r1)#
		}#
		if(all(ifFALSE==2)) {#
			return(r2)#
		}#
		if(all(ifFALSE==12)) {#
			return(list(r1,r2))#
		}#
#
	}#
}
mergedRange(r1=c(1,5),r2=c(7,10))
mergedRange(r1=c(1,5),r2=c(7,10),ifFALSE=1)
mergedRange(r1=c(1,5),r2=c(7,10),ifFALSE=2)
mergedRange(r1=c(1,5),r2=c(7,10),ifFALSE=12)
mergedRange <- function(r1,r2,ifFALSE=NA){#
	if(is.overlap(r1,r2)) {#
		range(c(r1,r2))#
	} else {#
		if(all(is.na(ifFALSE))) {#
			return(NA)#
		}#
		if(all(ifFALSE==1)) {#
			return(r1)#
		}#
		if(all(ifFALSE==2)) {#
			return(r2)#
		}#
		if(all(ifFALSE==12)) {#
			return(list(r1,r2))#
		}#
#
	}#
}
clusterIntervals <- function(data){#
	# sorts values in rows such that column 1 values are less those in column 2#
	df1 <- rbind(data[c(data[,1] < data[,2]),c(1,2)],data[c(data[,1] > data[,2]),c(2,1)])#
	# sorts rows by first column and then by successive columns to break ties#
	df2 <- df1[do.call(order, as.list(df1)),]#
	res=list(); length(res) <- nrow(df2)#
	names(res)[1] <- rownames(df2)[1]#
	res[[1]] <- unname(unlist(df2[1,]))#
	for(i in 2:nrow(df2)){#
		res[[i]] <- mergedRange(res[[(i-1)]],df2[i,],ifFALSE=2)#
		if(is.overlap(res[[(i-1)]],df2[i,])) {#
			names(res)[[i]] <- paste(rownames(df2)[i],names(res)[[i-1]],sep=",")#
			res[[(i-1)]] <- NA#
		} else {#
			names(res)[[i]] <- rownames(df2)[i]#
		}#
	}#
	intervalSets        <- do.call(rbind,res[!sapply(res,function(x){all(is.na(x))})])#
	result.df           <- as.data.frame(unname(as.matrix(cbind(rownames(intervalSets),intervalSets))))#
	colnames(result.df) <- c("merged","start","end")#
	result.df#
}
data <- read.table(text="#
A 1 3#
B 12 14#
C 2 4#
D 13 15#
E 5 10#
",sep=" ",header=F,row.names=1)
clusterIntervals(data)
library(devtools)
setwd("Documents/REEs")
getwd()
setwd("/Users/jeff/Documents/REEs")
devtools::document()
rm(list = c("clusterIntervals", "mergedRange"))
devtools::document()
clusterIntervals
Rscript <(echo -e "#
  is.overlap <- function(r1,r2){#
    min(r1) <= max(r2) && min(r2) <= max(r1)#
  }#
  mergedRange <- function(r1,r2){#
   if(is.overlap(r1,r2)) {#
      range(c(r1,r2))#
   } else {#
      return(r2)#
   }#
  }#
  clusterIntervals <- function(data){#
   df1 <- rbind(data[c(data[,1] < data[,2]),c(1,2)],data[c(data[,1] > data[,2]),c(2,1)])#
   df2 <- df1[do.call(order, as.list(df1)),]#
   res=list(); length(res) <- nrow(df2)#
   names(res)[1] <- rownames(df2)[1]#
   res[[1]] <- unname(unlist(df2[1,]))#
   for(i in 2:nrow(df2)){#
      res[[i]] <- mergedRange(res[[(i-1)]],df2[i,])#
      if(is.overlap(res[[(i-1)]],df2[i,])) {#
         names(res)[[i]] <- paste(rownames(df2)[i],names(res)[[i-1]],sep=',')#
         res[[(i-1)]] <- NA#
      } else {#
         names(res)[[i]] <- rownames(df2)[i]#
      }#
   }#
   intervalSets        <- do.call(rbind,res[!sapply(res,function(x){all(is.na(x))})])#
   result.df           <- as.data.frame(unname(as.matrix(cbind(rownames(intervalSets),intervalSets))))#
   colnames(result.df) <- c('merged','start','end')#
   result.df#
  }#
  dat <- read.table(text='$(echo "$DATi")',sep=' ',header=F,row.names=1)#
  clusterIntervals(data=dat)[,1] \n ") | awk -F' ' 'NR>1{print $2,$3,$4}'
as.integer(c("red","blue","green"))
31*3089
90000/500
SUBJECTS_NAMES=unlist(strsplit('sample36_0000033883 sample36_0000033883',split=' '))
SUBJECTS_NAMES
aln=readDNAStringSet("/Users/jeff/Downloads/group106.fa") #; plotAlignment()
plotAlignment(aln)
