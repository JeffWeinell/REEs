match(c("upstream","CDS.","downstream+"),parts.mat[,2])
match(c("upstream","CDS.","downstream*"),parts.mat[,2])
grep(c("upstream","CDS.","downstream*"),parts.mat[,2])
?nmatch
?pmatch
charmatch(c("", "ab", "ab"), c("abc", "ab"))
charmatch(c("", "ab", "ab"), c("abc", "ab","ab"))
charmatch(c("", "ab", "ab"), c("abc", "ab","abx"))
charmatch(c("", "ab", "ab"), c("abc", "ab","ab"))
pmatch(c("upstream","CDS","downstream"),parts.mat[,2],duplicates.ok=T)
pmatch(c("upstream","CDS","downstream"),parts.mat[,2],duplicates.ok=TRUE)
pmatch(c("upstream","CDS","downstream"),parts.mat[,2],dup=TRUE)
startsWith(parts.mat[,2],"CDS")
match(startsWith(parts.mat[,2],"CDS"))
match(TRUE,startsWith(parts.mat[,2],"CDS"))
startsWith(parts.mat[,2],"CDS") %>% match TRUE
match(TRUE,startsWith(parts.mat[,2],"CDS"))
match(TRUE,startsWith(parts.mat[,2],"CDS"))
parts.strings <- readLines("/Users/jeff/Documents/SequenceCapture/partitionedAlignments/All_parts/partitionFiles/WeinellEntry16_parts.txt")#
parts.mat     <- do.call(rbind,strsplit(REEs::mgsub(c("[-=]|,","[ ]+","[.][1-3]|[\\]3"),c(" "," ",""), parts.strings),split=" "))
parts.mat
match(c("upstream.noncoding","CDS","downstream.noncoding"),parts.mat[,2])
parts.mat2    <- parts.mat[match(c("upstream.noncoding","CDS","downstream.noncoding"),parts.mat[,2]),]
parts.mat2
parts.mat2[3,4]
parts.mat2[,3:4]
parts.mat3 <- parts.mat2[,3:4]
rownames(parts.mat3) <- parts.mat2[,2]
parts.mat3
mode(parts.mat3) <- "numeric"
parts.mat3
segments(x0=parts.mat3["CDS",1],y0=0,x1=parts.mat3["CDS",2],col="green")
segments(x0=parts.mat3["CDS",1],y0=-1,x1=parts.mat3["CDS",2],col="green")
rect(xleft=parts.mat3["CDS",1],ybottom=0,xright=parts.mat3["CDS",2],ytop=43,col="lightgray")
rect(xleft=parts.mat3["CDS",1],ybottom=0,xright=parts.mat3["CDS",2],ytop=43,col="lightgray",lwd=0)
rect(xleft=parts.mat3["CDS",1],ybottom=0,xright=parts.mat3["CDS",2],ytop=43,col="lightgray",lwd=0,density=10)
?rect
rect(xleft=parts.mat3["CDS",1],ybottom=0,xright=parts.mat3["CDS",2],ytop=43,col="lightgray",border=NA)
rect(xleft=parts.mat3["CDS",1],ybottom=0,xright=parts.mat3["CDS",2],ytop=45,col="lightgray",border=NA,alpha=0.3)
rect(xleft=parts.mat3["CDS",1],ybottom=0,xright=parts.mat3["CDS",2],ytop=45,col=rgb(211,211,211,alpha=0.5),border=NA,alpha=0.3)
rect(xleft=parts.mat3["CDS",1],ybottom=0,xright=parts.mat3["CDS",2],ytop=45,col=rgb(211,211,211,alpha=0.5),border=NA)
211/255
rect(xleft=parts.mat3["CDS",1],ybottom=0,xright=parts.mat3["CDS",2],ytop=45,col=rgb(0.8,0.8,0.8,alpha=0.5),border=NA)
i=2; plotAlignment(alns[[i]],title=names(alns)[i])
rect(xleft=parts.mat3["CDS",1],ybottom=0,xright=parts.mat3["CDS",2],ytop=45,col=rgb(0.8,0.8,0.8,alpha=0.5),border=NA)
i=2; plotAlignment(alns[[i]],title=names(alns)[i])
rect(xleft=parts.mat3["CDS",1],ybottom=0,xright=parts.mat3["CDS",2],ytop=45,col=rgb(0.8,0.8,0.8,alpha=0.2),border=NA)
rect(xleft=parts.mat3["CDS",1],ybottom=0,xright=parts.mat3["CDS",2],ytop=45,col=rgb(0.8,0.8,0.8,alpha=0.1),border=NA)
i=2; plotAlignment(alns[[i]],title=names(alns)[i])
rect(xleft=parts.mat3["CDS",1],ybottom=0,xright=parts.mat3["CDS",2],ytop=45,col=rgb(0.8,0.8,0.8,alpha=0.1),border=NA)
i=2; plotAlignment(alns[[i]],title=names(alns)[i])
rect(xleft=parts.mat3["CDS",1],ybottom=0,xright=parts.mat3["CDS",2],ytop=45,col=rgb(0.8,0.8,0.8,alpha=0.3),border=NA)
alnpath   <- file.path(OUTDIR,"All_parts","alignmentFiles",paste0(locus,".fa"))
alnpath
partspath <- file.path(OUTDIR,"All_parts","partitionFiles",paste0(locus,"_parts.txt"))
locus="WeinellEntry16"#
alnpath   <- file.path(OUTDIR,"All_parts","alignmentFiles",paste0(locus,".fa"))#
partspath <- file.path(OUTDIR,"All_parts","partitionFiles",paste0(locus,"_parts.txt"))
alnpath
partspath
aln           <- readDNAStringSet(alnpath)
parts.strings <- readLines(partspath)#
parts.mat     <- do.call(rbind,strsplit(REEs::mgsub(c("[-=]|,","[ ]+","[.][1-3]|[\\]3"),c(" "," ",""), parts.strings),split=" "))#
parts.mat2    <- parts.mat[match(c("upstream.noncoding","CDS","downstream.noncoding"),parts.mat[,2]),]
parts.mat2
plotAlignment(aln,title=paste(locus,"all parts"))
plotAlignment(readDNAStringSet("/Users/jeff/Downloads/WeinellEntry17.fa"))
readDNAStringSet("/Users/jeff/Downloads/WeinellEntry17.fa")
alignment <- readDNAStringSet("/Users/jeff/Downloads/WeinellEntry17.fa"); odseq::odseq(DNAMultipleAlignment(alignment), threshold = 0.01, distance_metric = "affine", B = 1000)
alignment <- readDNAStringSet("/Users/jeff/Downloads/WeinellEntry17.fa"); outliers <- odseq::odseq(DNAMultipleAlignment(alignment), threshold = 0.01, distance_metric = "affine", B = 1000)
length(outliers)
length(which(outliers))
!!length(outliers)
!!length(c(F,F,F))
!!length(which(c(F,F,F)))
BiocManager::install("JeffWeinell/REEs",update=FALSE, dependencies=c("Depends", "Imports", "LinkingTo"),build_vignettes=F,Ncpus=4,auth_token="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")
library(REEs) ; mafft.install()
max(floor((40)/2),1)
alignment <- readDNAStringSet("/Users/jeff/Downloads/WeinellEntry17.fa"); outliers <- odseq::odseq(DNAMultipleAlignment(alignment), threshold = 0.01, distance_metric = "affine", B = 1000)
alignment <- readDNAStringSet("/Users/jeff/Downloads/WeinellEntry18.fa"); outliers <- odseq::odseq(DNAMultipleAlignment(alignment), threshold = 0.01, distance_metric = "affine", B = 1000)
outliers
plotAlignment(readDNAStringSet("/Users/jeff/Downloads/WeinellEntry18.fa"))
aa.alignment.temp2 <- readAAStringSet("/Users/jeff/Downloads/WeinellEntry17.fa")
aa.alignment.temp2
aa.alignment.mdt0   <- REEs::filter.alignment(aa.alignment.temp, mdt=0)
aa.alignment.temp <- readAAStringSet("/Users/jeff/Downloads/WeinellEntry17.fa")
aa.alignment.temp2  <- REEs::filter.alignment(aa.alignment.temp)
aa.alignment.temp2
aa.alignment.mdt0   <- REEs::filter.alignment(aa.alignment.temp, mdt=0)
aa.alignment.mdt0
distAA.mdt1         <- Biostrings::stringDist(aa.alignment.temp2, upper=T,diag=T)
distAA.mdt1.mat    <- matrix(nrow=length(aa.alignment.temp2), ncol=length(aa.alignment.temp2))#
					distAA.mdt1.mat[lower.tri(distAA.mdt1.mat)] <- as.numeric(distAA.mdt1)
distAA.mdt1.mat[upper.tri(distAA.mdt1.mat)] <- t(distAA.mdt1.mat)[upper.tri(distAA.mdt1.mat)]
distAA.mdt1.mat
rownames(distAA.mdt1.mat) <- labels(aa.alignment.temp2)
median.distAA.mdt1 <- apply(distAA.mdt1,1,median,na.rm=T)/width(aa.alignment.temp2[1])
median.distAA.mdt1
toDrop <- which(median.distAA.mdt1 > 0.5)
toDrop
which(NA > 0.5)
which(c(median.distAA.mdt1,NA) > 0.5)
unique(which(c(median.distAA.mdt1,NA) > 0.5))
which(unique(c(median.distAA.mdt1,NA)) > 0.5)
which(c(median.distAA.mdt1,NA) > 0.5)
Biostrings::stringDist(DNAStringSet(c("ACGTACGT","ACGTACG-")))
Biostrings::stringDist(DNAStringSet(c("ACGTACGT","ACGTACG?")))
Biostrings::stringDist(DNAStringSet(c("ACGTACGT","ACGTACGN")))
Biostrings::stringDist(DNAStringSet(c("ACGTACGT","ACGTACG")))
Biostrings::stringDist(DNAStringSet(c("ACGTACGT","ACGTACG0")))
Biostrings::stringDist(DNAStringSet(c("ACGTACGT","ACGTACG-")))
outliers <- odseq::odseq(AAMultipleAlignment(aa.alignment.temp2), threshold = 0.01, distance_metric = "affine", B = 1000)
which(outliers)
names(which(c(median.distAA.mdt1,NA) > 0.5))
c(!names(which(c(median.distAA.mdt1,NA) > 0.5)) %in% which(outliers), !which(outliers) %in% names(which(c(median.distAA.mdt1,NA) > 0.5)))
names(which(c(median.distAA.mdt1,NA) > 0.5)) %in% which(outliers)
c(!names(which(c(median.distAA.mdt1,NA) > 0.5)) %in% names(which(outliers)), !names(which(outliers)) %in% names(which(c(median.distAA.mdt1,NA) > 0.5)))
names(which(outliers)) %in% names(which(c(median.distAA.mdt1,NA) > 0.5))
names(which(outliers))
names(which(c(median.distAA.mdt1,NA) > 0.5))
names(which(outliers)) %in% names(which(c(median.distAA.mdt1,NA) > 0.5))
setdiff(names(which(outliers)) , names(which(c(median.distAA.mdt1,NA) > 0.5)))
names(aa.alignment.temp2)[which(outliers)]
names(aa.alignment.temp2)[which(outliers)] %in% names(which(c(median.distAA.mdt1,NA) > 0.5))
!names(aa.alignment.temp2)[names(aa.alignment.temp2)[which(outliers)] %in% names(which(c(median.distAA.mdt1,NA) > 0.5))]
setdiff(names(aa.alignment.temp2)[which(outliers)], names(which(c(median.distAA.mdt1,NA) > 0.5)))
setdiff(names(aa.alignment.temp2)[which(outliers)], names(which(c(median.distAA.mdt1,NA) > 0.5))),setdiff(names(which(c(median.distAA.mdt1,NA) > 0.5)),names(aa.alignment.temp2)[which(outliers)])
setdiff(names(which(c(median.distAA.mdt1,NA) > 0.5)),names(aa.alignment.temp2)[which(outliers)])
c(setdiff(names(aa.alignment.temp2)[which(outliers)], names(which(c(median.distAA.mdt1,NA) > 0.5))),setdiff(names(which(c(median.distAA.mdt1,NA) > 0.5)),names(aa.alignment.temp2)[which(outliers)]))
?stringDist()
data(srPhiX174)
srPhiX174[1:4]
SolexaQuality(quPhiX174[1:4])
?SolexaQuality
submat <- matrix(nrow=4,ncol=4,dimnames=list(c("A","C","G","T"),c("A","C","G","T")))
submat
submat <- matrix(nrow=4,ncol=4,dimnames=list(c("A","C","G","T","-","N"),c("A","C","G","T","-","N")))
submat <- matrix(data=1,nrow=6,ncol=6,dimnames=list(c("A","C","G","T","-","N"),c("A","C","G","T","-","N")))
submat
submat[diag(submat)] < 0
submat[diag(submat)] <- 0
submat
diag(submat)
lower.tri(submat)
lower.tri(submat) && upper.tri(submat)
lower.tri(submat) | upper.tri(submat)
!lower.tri(submat) | upper.tri(submat)
!(lower.tri(submat) | upper.tri(submat))
submat <- matrix(data=1,nrow=6,ncol=6,dimnames=list(c("A","C","G","T","-","N"),c("A","C","G","T","-","N")))#
		submat[!(lower.tri(submat) | upper.tri(submat))] <- 0
submat
submat[c("N","-"),] <- 0
submat
submat[,c("N","-")] <- 0
submat
IUPAC_CODE_MAP
names(IUPAC_CODE_MAP)
length(names(IUPAC_CODE_MAP))
CODE_MAP <- c(names(IUPAC_CODE_MAP),"-")
CODE_MAP
CODE_MAP <- c(names(IUPAC_CODE_MAP),"-")#
		submat <- matrix(data=1,nrow=16,ncol=16,dimnames=list(CODE_MAP,CODE_MAP))
submat
submat[!(lower.tri(submat) | upper.tri(submat))] <- 0
submat[5:16,] <- submat[,5:16] <- 0
submat
AMINO_ACID_CODE
CODE_MAP <- c(names(AMINO_ACID_CODE),"-")
CODE_MAP
length(CODE_MAP)
submat <- function(type="DNA") {#
	if(type=="DNA"){#
		CODE_MAP <- c(names(IUPAC_CODE_MAP),"-")#
		submat <- matrix(data=1,nrow=16,ncol=16,dimnames=list(CODE_MAP,CODE_MAP))#
		submat[!(lower.tri(submat) | upper.tri(submat))] <- 0#
		submat[5:16,] <- submat[,5:16] <- 0#
		return(submat)#
	}#
	if(type=="AA"){#
		CODE_MAP <- c(names(AMINO_ACID_CODE),"-")#
		submat <- matrix(data=1,nrow=27,ncol=27,dimnames=list(CODE_MAP,CODE_MAP))#
		submat[!(lower.tri(submat) | upper.tri(submat))] <- 0#
		submat[26:27,] <- submat[,26:27] <- 0#
		return(submat)#
	}#
}
submat(type="DNA")
submat(type="AA")
test1 <- DNAStringSet(c("GTTATTATACCGTCAAGGACTGTGTGACTATTGAC","GGTGGTTATTATACCGTCAAGGACTGTGTGACTAT","TACCGTCAAGGACTGTGTGACTATTGACGTCCTTC","GTACGCCGGGCAATAATGTTTATGTTGGTTTCATG"))
test2 <- DNAStringSet(c("------ATACCGTCAAGGACTGTGTGACTATTGAC","GGTGGTTATTATACCGTCAAGGACTGTGTGANNNN","TACCGTCAAGGACTGTGTGACTATTGACGTCCTTC","GTACGCCGGGCAATAATGTTTATGTTGGTTTCATG"))
stringDist(test1,method="substitutionMatrix", substitutionMatrix=submat("DNA"))
width(test1)
res <- stringDist(test1,method="substitutionMatrix", substitutionMatrix=submat("DNA"))
res
sum(res)
stringDist(test1)
test1
test1 <- DNAStringSet(c("GTTATTATACCGTCAAGGACTGTGTGACTATTGAC","GTTATTATACCGTCAAGGACTGTGTGACTATTGAC","GTTATTATACCGTCAAGGACTGTGTGACTATTGAC","GTTATTATACCGTCAAGGACTGTGTGACTATTGAC"))
stringDist(test1)
stringDist(test1,method="substitutionMatrix", substitutionMatrix=submat("DNA"))
submat <- function(type="DNA") {#
	if(type=="DNA"){#
		CODE_MAP <- c(names(IUPAC_CODE_MAP),"-")#
		submat <- matrix(data=(-1),nrow=16,ncol=16,dimnames=list(CODE_MAP,CODE_MAP))#
		submat[!(lower.tri(submat) | upper.tri(submat))] <- 0#
		submat[5:16,] <- submat[,5:16] <- 0#
		return(submat)#
	}#
	if(type=="AA"){#
		CODE_MAP <- c(names(AMINO_ACID_CODE),"-")#
		submat <- matrix(data=1,nrow=27,ncol=27,dimnames=list(CODE_MAP,CODE_MAP))#
		submat[!(lower.tri(submat) | upper.tri(submat))] <- 0#
		submat[26:27,] <- submat[,26:27] <- 0#
		return(submat)#
	}#
}
stringDist(test1,method="substitutionMatrix", substitutionMatrix=submat("DNA"))
test2 <- DNAStringSet(c("CTTATTATACCGTCAAGGACTGTGTGACTATTGAC","GTTATTATACCGTCAAGGACTGTGTGACTATTGAC","GTTATTATACCGTCAAGGACTGTGTGACTATTGAC","GTTATTATACCGTCAAGGACTGTGTGACTATTGAC"))
stringDist(test2,method="substitutionMatrix", substitutionMatrix=submat("DNA"))
test3 <- DNAStringSet(c("C-TATTATACCGTCAAGGACTGTGTGACTATTGAC","GTTATTATACCGTCAAGGACTGTGTGACTATTGAC","GTTATTATACCGTCAAGGACTGTGTGACTATTGAC","GTTATTATACCGTCAAGGACTGTGTGACTATTGAC"))
stringDist(test3,method="substitutionMatrix", substitutionMatrix=submat("DNA"))
submat <- function(type="DNA") {#
	if(type=="DNA"){#
		CODE_MAP <- c(names(IUPAC_CODE_MAP),"-")#
		submat <- matrix(data=(-1),nrow=16,ncol=16,dimnames=list(CODE_MAP,CODE_MAP))#
		submat[!(lower.tri(submat) | upper.tri(submat))] <- 0#
		submat[5:16,] <- submat[,5:16] <- 0#
		return(submat)#
	}#
	if(type=="AA"){#
		CODE_MAP <- c(names(AMINO_ACID_CODE),"-")#
		submat <- matrix(data=(-1),nrow=27,ncol=27,dimnames=list(CODE_MAP,CODE_MAP))#
		submat[!(lower.tri(submat) | upper.tri(submat))] <- 0#
		submat[26:27,] <- submat[,26:27] <- 0#
		return(submat)#
	}#
}
aa.alignment.temp2
distAA.mdt1         <- Biostrings::stringDist(aa.alignment.temp2, method="substitutionMatrix",substitutionMatrix=submat("AA"), upper=T,diag=T)
distAA.mdt1.mat    <- matrix(nrow=length(aa.alignment.temp2), ncol=length(aa.alignment.temp2))#
					distAA.mdt1.mat[lower.tri(distAA.mdt1.mat)] <- as.numeric(distAA.mdt1)#
					distAA.mdt1.mat[upper.tri(distAA.mdt1.mat)] <- t(distAA.mdt1.mat)[upper.tri(distAA.mdt1.mat)]#
					rownames(distAA.mdt1.mat) <- labels(aa.alignment.temp2)
median.distAA.mdt1   <- apply(distAA.mdt1,1,median,na.rm=T)/width(aa.alignment.temp2[1])
median.distAA.mdt1
density(median.distAA.mdt1)
plot(density(median.distAA.mdt1))
AA.pdist.drop.thresh <- 30
AA.pdist.drop.thresh <- 0.3
toDrop <- which(median.distAA.mdt1 > AA.pdist.drop.thresh)
toDrop
CODE_MAP <- c(names(IUPAC_CODE_MAP),"-")#
		submat <- matrix(data=(-1),nrow=16,ncol=16,dimnames=list(CODE_MAP,CODE_MAP))#
		#submat[!(lower.tri(submat) | upper.tri(submat))] <- 0#
		submat[5:16,] <- submat[,5:16] <- 0
submat
CODE_MAP <- c(names(AMINO_ACID_CODE),"-")#
		submat <- matrix(data=(-1),nrow=27,ncol=27,dimnames=list(CODE_MAP,CODE_MAP))#
		#submat[!(lower.tri(submat) | upper.tri(submat))] <- 0#
		submat[26:27,] <- submat[,26:27] <- 0#
		return(submat)
submat
submat <- function(type="DNA") {#
	if(type=="DNA"){#
		CODE_MAP <- c(names(IUPAC_CODE_MAP),"-")#
		submat <- matrix(data=(-1),nrow=16,ncol=16,dimnames=list(CODE_MAP,CODE_MAP))#
		submat[!(lower.tri(submat) | upper.tri(submat))] <- 0#
		submat[5:16,] <- submat[,5:16] <- 0#
		return(submat)#
	}#
	if(type=="AA"){#
		CODE_MAP <- c(names(AMINO_ACID_CODE),"-")#
		submat <- matrix(data=(-1),nrow=27,ncol=27,dimnames=list(CODE_MAP,CODE_MAP))#
		submat[!(lower.tri(submat) | upper.tri(submat))] <- 0#
		submat[26:27,] <- submat[,26:27] <- 0#
		return(submat)#
	}#
	if(type=="DNA_comparable"){#
		CODE_MAP <- c(names(IUPAC_CODE_MAP),"-")#
		submat <- matrix(data=(-1),nrow=16,ncol=16,dimnames=list(CODE_MAP,CODE_MAP))#
		#submat[!(lower.tri(submat) | upper.tri(submat))] <- 0#
		submat[5:16,] <- submat[,5:16] <- 0#
		return(submat)#
	}#
	if(type=="AA_comparable"){#
		CODE_MAP <- c(names(AMINO_ACID_CODE),"-")#
		submat <- matrix(data=(-1),nrow=27,ncol=27,dimnames=list(CODE_MAP,CODE_MAP))#
		#submat[!(lower.tri(submat) | upper.tri(submat))] <- 0#
		submat[26:27,] <- submat[,26:27] <- 0#
		return(submat)#
	}#
}
distAA.mdt1_compared <- Biostrings::stringDist(aa.alignment.temp2, method="substitutionMatrix",substitutionMatrix=submat("AA_comparable"), upper=T,diag=T)
distAA.mdt1          <- Biostrings::stringDist(aa.alignment.temp2, method="substitutionMatrix",substitutionMatrix=submat("AA"), upper=T,diag=T)#
					distAA.mdt1.mat      <- matrix(nrow=length(aa.alignment.temp2), ncol=length(aa.alignment.temp2))#
					distAA.mdt1.mat[lower.tri(distAA.mdt1.mat)] <- as.numeric(distAA.mdt1)#
					distAA.mdt1.mat[upper.tri(distAA.mdt1.mat)] <- t(distAA.mdt1.mat)[upper.tri(distAA.mdt1.mat)]#
					rownames(distAA.mdt1.mat) <- labels(aa.alignment.temp2)
distAA.mdt1_compared <- Biostrings::stringDist(aa.alignment.temp2, method="substitutionMatrix",substitutionMatrix=submat("AA_comparable"), upper=T,diag=T)#
					distAA.mdt1_compared.mat  <- matrix(nrow=length(aa.alignment.temp2), ncol=length(aa.alignment.temp2))#
					distAA.mdt1_compared.mat[lower.tri(distAA.mdt1_compared.mat)] <- as.numeric(distAA.mdt1_compared)#
					distAA.mdt1_compared.mat[upper.tri(distAA.mdt1_compared.mat)] <- t(distAA.mdt1_compared.mat)[upper.tri(distAA.mdt1_compared.mat)]#
					rownames(distAA.mdt1_compared.mat) <- labels(aa.alignment.temp2)
distAA.mdt1.mat
distAA.mdt1_compared.mat
(distAA.mdt1.mat/distAA.mdt1_compared.mat)
median.distAA.mdt1   <- apply((distAA.mdt1.mat/distAA.mdt1_compared.mat),median,na.rm=T)
median.distAA.mdt1   <- apply(X=(distAA.mdt1.mat/distAA.mdt1_compared.mat),1,FUN=median,na.rm=T)
median.distAA.mdt1
density(median.distAA.mdt1)
plot(density(median.distAA.mdt1))
AA.pdist.drop.thresh
toDrop <- which(median.distAA.mdt1 > AA.pdist.drop.thresh)
toDrop
AA.pdist.drop.thresh=50
toDrop <- which(median.distAA.mdt1 > AA.pdist.drop.thresh)
toDrop
AA.pdist.drop.thresh=0.5
toDrop <- which(median.distAA.mdt1 > AA.pdist.drop.thresh)
toDrop
devtools::document()
rm(list = c("submat"))
devtools::document()
BiocManager::install("JeffWeinell/REEs",update=FALSE, dependencies=c("Depends", "Imports", "LinkingTo"),build_vignettes=F,Ncpus=4,auth_token="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")
library(REEs) ; mafft.install()
INDIR="/Users/jeff/Documents/SequenceCapture/alignments_WENames"#
OUTDIR="/Users/jeff/Documents/SequenceCapture/partitionedAlignments"#
TARGPATH="/Users/jeff/Documents/GitHub/SnakeCap/PostSequencing/Partitioned-Alignments/Weinell_TargetLoci_Snakes_Final_targetCDS_v4.fa"#
allsampleskey <- read.csv("/Users/jeff/Documents/GitHub/SnakeCap/allsamples_key.txt",sep="\t",header=F)
i=8 ; res <- make.partitioned.alignment(input.path=INDIR,output.dir=OUTDIR,TargetCDS.path=TARGPATH,ith.locus.start=i,ith.locus.end=i,trimto=allsampleskey$V2[allsampleskey$V3=="SeqCap"])
?filter.alignment
length(res)
lengths(res)
res[[1]][1]
res[[1]][2]
names(res[[1]])
res[[1]][3]
res[[1]][4]
res[[1]][5]
res[[1]][6]
res[[1]][7]
res[[1]][8]
res[[1]][9]
res[[1]][10]
filter.alignment(res[[1]][1],mdt=0.9,treat.ambiguous.as.missing=T,min.allele.freqs.dna=c(2,1,0,0))
res[[1]][[1]]
filter.alignment(res[[1]][[1]],mdt=0.9,treat.ambiguous.as.missing=T,min.allele.freqs.dna=c(2,1,0,0))
test <- filter.alignment(res[[1]][[1]],mdt=0.9,treat.ambiguous.as.missing=T,min.allele.freqs.dna=c(2,1,0,0))
plotAlignment(test)
WE17_inf <- filter.alignment(res[[1]][[1]],mdt=1,treat.ambiguous.as.missing=T,min.allele.freqs.dna=c(2,2,0,0))
plotAlignment(WE17_inf)
writeXStringSet(WE17_inf,filepath="/Users/jeff/Documents/SequenceCapture/WE17_pinf.fa")
q("no")
