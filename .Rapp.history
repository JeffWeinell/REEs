trees1<-trees
trees2<-trees
length(trees)
length(trees1)
length(trees2)
trees1
plot(trees1)
distances <- RobinsonFoulds(trees)#
distances <- PhylogeneticInfoDistance(trees)#
distances <- as.dist(Quartet::QuartetDivergence(#
  Quartet::ManyToManyQuartetAgreement(trees), similarity = FALSE))
mapping <- cmdscale(distances, k = 12)
mapping
sammon <- MASS::sammon(distances, k = 12)#
mapping <- sammon$points
par(mar = rep(0, 4))#
plot(mapping,#
     asp = 1, # Preserve aspect ratio - do not distort distances#
     ann = FALSE, axes = FALSE, # Don't label axes: dimensions are meaningless#
     col = treeCols, pch = 16#
     )
possibleClusters <- 2:10
pamClusters <- lapply(possibleClusters, function (k) cluster::pam(distances, k = k))#
pamSils <- vapply(pamClusters, function (pamCluster) {#
  mean(cluster::silhouette(pamCluster)[, 3])#
}, double(1))#
#
bestPam <- which.max(pamSils)#
pamSil <- pamSils[bestPam]#
pamCluster <- pamClusters[[bestPam]]$cluster
hTree <- protoclust(distances)#
hClusters <- lapply(possibleClusters, function (k) cutree(hTree, k = k))#
hSils <- vapply(hClusters, function (hCluster) {#
  mean(cluster::silhouette(hCluster, distances)[, 3])#
}, double(1))#
bestH <- which.max(hSils)#
hSil <- hSils[bestH]#
hCluster <- hClusters[[bestH]]#
#
plot(pamSils ~ possibleClusters,#
     xlab = 'Number of clusters', ylab = 'Silhouette coefficient',#
     ylim = range(c(pamSils, hSils)))#
points(hSils ~ possibleClusters, pch = 2)#
legend('topright', c('PAM', 'Hierarchical'), pch = 1:2)
hTree <- protoclust(distances)#
hClusters <- lapply(possibleClusters, function (k) cutree(hTree, k = k))#
hSils <- vapply(hClusters, function (hCluster) {#
  mean(cluster::silhouette(hCluster, distances)[, 3])#
}, double(1))
possibleClusters <- 2:10#
#
pamClusters <- lapply(possibleClusters, function (k) cluster::pam(distances, k = k))#
pamSils <- vapply(pamClusters, function (pamCluster) {#
  mean(cluster::silhouette(pamCluster)[, 3])#
}, double(1))#
#
bestPam <- which.max(pamSils)#
pamSil <- pamSils[bestPam]#
pamCluster <- pamClusters[[bestPam]]$cluster
hTree <- protoclust(distances)#
hClusters <- lapply(possibleClusters, function (k) cutree(hTree, k = k))#
hSils <- vapply(hClusters, function (hCluster) {#
  mean(cluster::silhouette(hCluster, distances)[, 3])#
}, double(1))
hTree <- protoclust(distances)
?protoclust
??protoclust
library(protoclust)
hTree <- protoclust(distances)#
hClusters <- lapply(possibleClusters, function (k) cutree(hTree, k = k))#
hSils <- vapply(hClusters, function (hCluster) {#
  mean(cluster::silhouette(hCluster, distances)[, 3])#
}, double(1))
bestH <- which.max(hSils)#
hSil <- hSils[bestH]#
hCluster <- hClusters[[bestH]]
plot(pamSils ~ possibleClusters,#
     xlab = 'Number of clusters', ylab = 'Silhouette coefficient',#
     ylim = range(c(pamSils, hSils)))#
points(hSils ~ possibleClusters, pch = 2)#
legend('topright', c('PAM', 'Hierarchical'), pch = 1:2)
cluster <- hClusters[[2 - 1]]
class(hTree) <- 'hclust'#
par(mar = c(0, 0, 0, 0))#
plot(hTree, labels = FALSE, main = '')#
points(seq_along(trees), rep(1, length(trees)), pch = 16,#
       col = spectrum[hTree$order])
class(hTree) <- 'hclust'#
par(mar = c(0, 0, 0, 0))#
plot(hTree, labels = FALSE, main = '')#
points(seq_along(trees), rep(1, length(trees)), pch = 16,#
       col = spectrum[hTree$order])
par(mfrow = c(1, 2), mar = rep(0.2, 4))#
col1 <- spectrum[mean(treeNumbers[cluster == 1])]#
col2 <- spectrum[mean(treeNumbers[cluster == 2])]#
plot(consensus(trees[cluster == 1], p = 0.5),#
     edge.color = col1, edge.width = 2, tip.color = col1)#
plot(consensus(trees[cluster == 2], p = 0.5),#
     edge.color = col2, edge.width = 2, tip.color = col2)
txc <- vapply(seq_len(ncol(mapping)), function (k) {#
  newDist <- dist(mapping[, seq_len(k)])#
  MappingQuality(distances, newDist, 10)['TxC']#
}, 0)#
plot(txc, xlab = 'Dimension')#
abline(h = 0.9, lty = 2)
mstEnds <- MSTEdges(distances)
nDim <- which.max(txc > 0.9)#
plotSeq <- matrix(0, nDim, nDim)#
plotSeq[upper.tri(plotSeq)] <- seq_len(nDim * (nDim - 1) / 2)#
plotSeq <- t(plotSeq[-nDim, -1])#
plotSeq[nDim * 1:3] <- (nDim * 2) + 1:3#
layout(plotSeq)#
par(mar = rep(0.1, 4))#
#
for (i in 2:nDim) for (j in seq_len(i - 1)) {#
  # Set up blank plot#
  plot(mapping[, j], mapping[, i], ann = FALSE, axes = FALSE, frame.plot = TRUE,#
       type = 'n', asp = 1, xlim = range(mapping), ylim = range(mapping))#
  # Plot MST#
  apply(mstEnds, 1, function (segment)#
    lines(mapping[segment, j], mapping[segment, i], col = "#bbbbbb", lty = 1))#
  # Add points#
  points(mapping[, j], mapping[, i], pch = 16, col = treeCols)#
#
  # Mark clusters#
  for (clI in unique(cluster)) {#
    inCluster <- cluster == clI#
    clusterX <- mapping[inCluster, j]#
    clusterY <- mapping[inCluster, i]#
    hull <- chull(clusterX, clusterY)#
    polygon(clusterX[hull], clusterY[hull], lty = 1, lwd = 2,#
            border = '#54de25bb')#
    text(mean(clusterX), mean(clusterY), clI, col = '#54de25bb', font = 2)#
  }#
}#
# Annotate dimensions#
plot(0, 0, type = 'n', ann = FALSE, axes = FALSE)#
text(0, 0, 'Dimension 2')#
plot(0, 0, type = 'n', ann = FALSE, axes = FALSE)#
text(0, 0, 'Dimension 3')#
plot(0, 0, type = 'n', ann = FALSE, axes = FALSE)#
text(0, 0, 'Dimension 4')
library(hypervolume)
install.packages("hypervolume")
install.packages("hypervolume")
library(hypervolume)
hypervolumeInstalled <- requireNamespace('hypervolume', quietly = TRUE)
if (hypervolumeInstalled) {#
  capture.output({#
    library('hypervolume')#
    hv1 <- hypervolume_gaussian(pid_mapping[pid_cluster == 1, 1:3])#
    hv2 <- hypervolume_gaussian(pid_mapping[pid_cluster == 2, 1:3])#
    hv_dist <- hypervolume_distance(hv1, hv2)#
    hyperset <- hypervolume_set(hv1, hv2, check.memory = FALSE)#
    hv_overlap <- hypervolume_overlap_statistics(hyperset)#
  }) -> XX#
  hv_dist#
  hv_overlap#
} else {#
  print("Install the 'hypervolume' package to run this example")#
}
shared.tips      <- intersect(tree1.collapsed$tip.label,tree2.collapsed$tip.label)#
		tree1.drop.names <- setdiff(tree1.collapsed$tip.label,shared.tips)#
		tree2.drop.names <- setdiff(tree2.collapsed$tip.label,shared.tips)#
		tree1.trimmed <- drop.tip(tree1.collapsed,tree1.drop.names)#
		tree2.trimmed <- drop.tip(tree2.collapsed,tree2.drop.names)
shared.tips      <- intersect(trees.chr1.phy[[1]]$tip.label,trees.chr1.phy[[2]]$tip.label)
trees.chr1.phy
tree1 <- trees.chr1.phy[[1]]#
tree2 <- trees.chr1.phy[[2]]#
shared.tips      <- intersect(tree1$tip.label,tree2$tip.label)
?intersect.all
46468/4797253
# TRUE: 837660
274+63
congruency.edgemat <- read.table("/Users/jeff/Downloads/genetrees_iqtree_taxanames_congruency_edgemat.txt")
head(congruency.edgemat)
colnames(congruency.edgemat) <- c('tree1','tree2','congruent')
edgemat<-congruency.edgemat
edgemat.congruent <- edgemat[grepl(T, edgemat[,'congruent']),]
dim(edgemat.congruent)
dim(edgemat)
INPATH_TREES="/Users/jeff/Documents/GitHub/SnakeCap/genetrees/genetrees_iqtree_taxanames.trees"
library(REEs)#
    library(ape)#
    library(phangorn)
trees.txt <- gsub('.* ','',trees0.txt)#
    treenames <- gsub(' .*','',trees0.txt)#
    trees.phy <- do.call(c,lapply(trees.txt,ape::read.tree,file=NULL))#
    names(trees.phy) <- treenames
length(trees.phy)
lengths(trees.phy)
TREES_INPATH='/panfs/pfs.local/home/j926w878/scratch/scratch_v4/SequenceCapture/SnakeCap_AllSamples/blast_database11/genetrees_iqtree_taxanames.trees'
trees0.txt <- readLines(TREES_INPATH)#
    trees.txt <- gsub('.* ','',trees0.txt)#
    treenames <- gsub(' .*','',trees0.txt)#
    trees.phy <- do.call(c,lapply(trees.txt,ape::read.tree,file=NULL))
TREES_INPATH="/Users/jeff/Documents/GitHub/SnakeCap/genetrees/genetrees_iqtree_taxanames.trees"
trees0.txt <- readLines(TREES_INPATH)#
    trees.txt <- gsub('.* ','',trees0.txt)#
    treenames <- gsub(' .*','',trees0.txt)#
    trees.phy <- do.call(c,lapply(trees.txt,ape::read.tree,file=NULL))#
    names(trees.phy) <- treenames
length(trees.phy)
trees.phy[[1]]$node.label
as.numeric(gsub(".*/","",trees.phy[[1]]$node.label))
as.numeric(gsub(".*/","",trees.phy[[1]]$node.label)) >= 95
length(as.numeric(gsub(".*/","",trees.phy[[1]]$node.label)) >= 95)
length(as.numeric(gsub(".*/","",trees.phy[[1]]$node.label)) >= 100)
length(which(as.numeric(gsub(".*/","",trees.phy[[1]]$node.label)) >= 95))
length(which(c(FALSE,FALSE,FALSE)))
which(c(FALSE,FALSE,FALSE))
x=1
length(which(as.numeric(gsub(".*/","",trees.phy[[x]]$node.label)) >= 95))
x=3
length(which(as.numeric(gsub(".*/","",trees.phy[[x]]$node.label)) >= 95))
N95 <- sapply(1:length(trees.phy),function(x){ length(which(as.numeric(gsub(".*/","",trees.phy[[x]]$node.label)) >= 95))})
length(N95)
N95[1:10]
resolution.df <- data.frame(treename=treenames,N95=N95)
dim(resolution.df)
resolution.df[,'N0'] <- sapply(1:length(trees.phy),function(x){ length(which(as.numeric(gsub(".*/","",trees.phy[[x]]$node.label)) >= 0))})
head(resolution.df)
match(edgemat.congruent[1:10,'tree1'],treenames)
resolution.df[match(edgemat.congruent[1:10,'tree1'],resolution.df[,'treename']),'N95']
edgemat.congruent[,'tree1.N95'] <- resolution.df[match(edgemat.congruent[,'tree1'],resolution.df[,'treename']),'N95']
head(edgemat.congruent)
edgemat.congruent[,'tree2.N95'] <- resolution.df[match(edgemat.congruent[,'tree2'],resolution.df[,'treename']),'N95']
head(edgemat.congruent)
edgemat.congruent[,'tree1.N0'] <- resolution.df[match(edgemat.congruent[,'tree1'],resolution.df[,'treename']),'N0']
edgemat.congruent[,'tree2.N0'] <- resolution.df[match(edgemat.congruent[,'tree2'],resolution.df[,'treename']),'N0']
head(edgemat.congruent)
edgemat.congruent[,'sum.N95'] <- edgemat.congruent[,'tree1.N95'] + edgemat.congruent[,'tree2.N95']
head(edgemat.congruent)
28+13
edgemat.congruent[,'sum.N0'] <- edgemat.congruent[,'tree1.N0'] + edgemat.congruent[,'tree2.N0']
head(edgemat.congruent)
plot(density(edgemat.congruent[,'sum.N95']))
plot(density(edgemat.congruent[,'sum.N0']))
plot(density(edgemat.congruent[,'sum.N95']))
range(edgemat.congruent[,'sum.N95'])
edgemat.congruent2 <- edgemat.congruent[(edgemat.congruent[,'sum.N95']>=60),]
dim(edgemat.congruent2)
head(edgemat.congruent2)
range(edgemat.congruent[,'tree2.N95'])
# max high-resolution tree has 51 nodes resolved
# max high-resolution genetree has 51 nodes resolved
range(edgemat.congruent[,'tree2.N0'])
# no tree has all individuals sampled
# no gene tree has all individuals sampled
edgemat.congruent3 <- edgemat.congruent[(edgemat.congruent[,'sum.N95']>=80),]
dim(edgemat.congruent3)
edgemat.congruent4 <- edgemat.congruent[(edgemat.congruent[,'sum.N95']>=90),]
dim(edgemat.congruent4)
edgemat.congruent4
library(ggtree)
p <- ggtree(trees.phy['group73'])
plot(p)
trees.phy['group73']$tip.label
trees.phy['group73']$tip.labels
trees.phy['group73']$labels
attributes(trees.phy['group73'])
attributes(trees.phy$group73)
p <- ggtree(trees.phy$group73)
plot(p)
trees.phy$group73$tip.label
dim(df_tip_data)
load(df_tip_data)
library(TDbook)
install.packages('TDbook')
library(TDbook)
dim(df_tip_data)
df_tip_data
tips.df <- data.frame(Newick_label=trees.phy$group73$tip.label)
tips.df
p <- ggtree(trees.phy$group73) + tips.df
p <- ggtree(trees.phy$group73) %<+% tips.df
plot(p)
p2 <- p + geom_tiplab(offset = .6, hjust = .5)
plot(p2)
p2 <- p + geom_tiplab(offset = .6, hjust = .5,linesize=0.25)
plot(p2)
p2 <- p + geom_tiplab(offset = .6, hjust = .5,size=0.5)
plot(p2)
p2 <- p + geom_tiplab(offset = .6, hjust = .5,size=1)
plot(p2)
p2 <- p + geom_tiplab(offset = 0.3, hjust =0.25,size=1)
plot(p2)
p2 <- p + geom_tiplab(offset = 0.1, hjust =0.25,size=1.5)
plot(p2)
p2 <- p + geom_tiplab(offset = 0.05, size=1.5)
plot(p2)
p2 <- p + geom_tiplab(size=1.5)
p2
p2 <- p + geom_tiplab(size=1.5) + xlim(-.1, 1.1)
p2
?ape::root
test <- ape::root(trees.phy$group73,c("Boa-constrictor","Python-molurus"))
p <- ggtree(test) %<+% tips.df
p2 <- p + geom_tiplab(size=1.5) + xlim(-.1, 1.1)
p2
p2 <- p + geom_tiplab(size=1.5) + xlim(-.1, 1)
p2
test2 <- ggtree::reroot(trees.phy$group73,c("Boa-constrictor","Python-molurus"))
test2 <- reroot(trees.phy$group73,c("Boa-constrictor","Python-molurus"))
?reroot
??reroot
library(igraph)
?clusters
g <- sample_gnp(20, 1/20)
g
test <- graph(edgemat.congruent3[,c('tree1','tree2')])
test ,- edgemat.congruent3[,c('tree1','tree2')]
test <- edgemat.congruent3[,c('tree1','tree2')]
class(test)
head(test)
test2 <- graph(as.matrix(test))
class(test2)
?clusters
test3 <- components(test2)
class(test3)
lengths(test3)
p2.ig <- plot.igraph(test2)
length(test3)
lengths(test3)
test3$membership
table(test3$membership)
# most are in group3
edgemat.congruent5 <- edgemat.congruent[(edgemat.congruent[,'sum.N95']>=70),]
dim(edgemat.congruent5)
head(edgemat.congruent5)
length(unique(unlist(edgemat.congruent5[,c('tree1','tree2')])))
length(unique(unlist(edgemat.congruent2[,c('tree1','tree2')])))
clust60 <- components(graph(as.matrix(edgemat.congruent2[,c('tree1','tree2')])))$membership
length(clust60)
length(table(clust60))
plot(density(table(clust60)))
table(clust60)
which(clust60)==1
which(clust60==1)
clust60 <- components(graph(as.matrix(edgemat.congruent2[,c('tree1','tree2')]),directed=F))$membership
table(clust60)
?components
length(which(edgemat.congruent2[,'tree1'=='group1']))
length(which(edgemat.congruent2[,'tree1']=='group1'))
edgemat.congruent2[edgemat.congruent2[,'tree1']=='group1',]
clust60['group688']
clust60['group1']
head(as.matrix(edgemat.congruent2[,c('tree1','tree2')]))
g2 <- graph(as.matrix(edgemat.congruent2[,c('tree1','tree2')]),directed=F)
g2.dec <- decompose(g2)
length(g2.dec)
is_connected(g2)
lengths(g2.dec)
lengths(g2.dec[[1]])
length(g2.dec[[1]])
g2.dec[[1]]
g2.dec[[2]]
?graph()
test <- unlist(as.matrix(edgemat.congruent2[,c('tree1','tree2')]))
test[1]
test[2]
test <- unlist(t(as.matrix(edgemat.congruent2[,c('tree1','tree2')])))
test[1]
test[2]
test[3]
test[4]
g2 <- graph(unlist(t(as.matrix(edgemat.congruent2[,c('tree1','tree2')]))),directed=F)
clust60 <- components(g2)$membership
length(table(clust60))
is_connected(clust60)
is_connected(g2)
g5 <- graph(unlist(t(as.matrix(edgemat.congruent5[,c('tree1','tree2')]))),directed=F)
is_connected(g5)
g60 <- g2
g70 <- g5
clust70 <- components(g70)
components[2]
clust70[2]
g80 <- graph(unlist(t(as.matrix(edgemat.congruent3[,c('tree1','tree2')]))),directed=F)
clust80 <- components(g80)
clust80
g90 <- graph(unlist(t(as.matrix(edgemat.congruent4[,c('tree1','tree2')]))),directed=F)
clust90 <- components(g90)
clust90
components(graph(unlist(t(as.matrix(edgemat.congruent[(edgemat.congruent[,'sum.N95']>=80),][,c('tree1','tree2')]))),directed=F))
components(graph(unlist(t(as.matrix(edgemat.congruent[(edgemat.congruent[,'sum.N95']>=85),][,c('tree1','tree2')]))),directed=F))
components(graph(unlist(t(as.matrix(edgemat.congruent[(edgemat.congruent[,'sum.N95']>=86),][,c('tree1','tree2')]))),directed=F))
components(graph(unlist(t(as.matrix(edgemat.congruent[(edgemat.congruent[,'sum.N95']>=87),][,c('tree1','tree2')]))),directed=F))
52/64
35+29
