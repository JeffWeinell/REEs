grep("622703",names(loci.trimmed))
names(loci.trimmed)[grep("622703",names(loci.trimmed))]
names(new.names.right)[grep("622703",names(new.names.right))]
names(new.names.left)[grep("622703",names(new.names.left))]
new.names.right[grep("622703",new.names.right)]
grep("622703",new.names.right)
new.coordinates.right[23,]
old.coordinates.right[23,]
"QLTV01004096.1:622037-622703" %in% ddrad.targets
invisible(ddrad.targets <- c("QLTV01000198.1:269300-270254","QLTV01000211.1:1009779-1010749","QLTV01000225.1:225770-226713","QLTV01000240.1:1441741-1442660","QLTV01000374.1:1051541-1052489","QLTV01000398.1:213792-214725","QLTV01000419.1:4359824-4360808","QLTV01000577.1:618061-619037","QLTV01000582.1:1212576-1213542","QLTV01000592.1:285284-286283","QLTV01000601.1:336261-337163","QLTV01000602.1:406466-407456","QLTV01000613.1:339185-340130","QLTV01000613.1:3872236-3873137","QLTV01000635.1:763718-764681","QLTV01000804.1:762606-763582","QLTV01000831.1:332501-333481","QLTV01000832.1:29411-30403","QLTV01000850.1:2351412-2352315","QLTV01000972.1:3991616-3992520","QLTV01000974.1:6209870-6210773","QLTV01000981.1:1971835-1972788","QLTV01000994.1:1110423-1111363","QLTV01001010.1:938567-939544","QLTV01001021.1:1321637-1322636","QLTV01001121.1:244133-245073","QLTV01001123.1:836279-837223","QLTV01001167.1:79657-80600","QLTV01001172.1:29324-30278","QLTV01001172.1:489528-490452","QLTV01001320.1:1274828-1275781","QLTV0100132
4.1:484905-485825","QLTV01001336.1:1573906-1574874","QLTV01001370.1:505287-506190","QLTV01001459.1:187585-188493","QLTV01001461.1:260984-261915","QLTV01001483.1:4727669-4728649","QLTV01001483.1:488655-489569","QLTV01001572.1:38474-39377","QLTV01001572.1:38474-39397","QLTV01001588.1:62096-63035","QLTV01001684.1:1805699-1806603","QLTV01001684.1:4341042-4341956","QLTV01001698.1:2116151-2117061","QLTV01001740.1:249963-250923","QLTV01001797.1:170386-171379","QLTV01001823.1:1171542-1172463","QLTV01001849.1:3319155-3320113","QLTV01001997.1:2433323-2434272","QLTV01002011.1:742791-743742","QLTV01002018.1:739423-740395","QLTV01002140.1:1882286-1883214","QLTV01002141.1:1465566-1466487","QLTV01002258.1:1190438-1191425","QLTV01002260.1:2382021-2382925","QLTV01002260.1:5031452-5032408","QLTV01002264.1:1000944-1001932","QLTV01002264.1:562178-563091","QLTV01002273.1:857142-857613","QLTV01002278.1:1748026-1748942","QLTV01002414.1:1236201-1237117","QLTV01002419.1:2517428-2518394","QLTV01002419.1:6397637-6398562","QLTV0100242
6.1:646424-647339","QLTV01002442.1:292530-293455","QLTV01002442.1:325418-326379","QLTV01002442.1:473972-474901","QLTV01002530.1:4518902-4519887","QLTV01002538.1:34682-35590","QLTV01002555.1:692792-693717","QLTV01002680.1:1376133-1377068","QLTV01002691.1:853242-854203","QLTV01002693.1:1933158-1934073","QLTV01002694.1:2560030-2560981","QLTV01002702.1:5721237-5722231","QLTV01002713.1:63442-64400","QLTV01002718.1:222777-223774","QLTV01002718.1:2336898-2337817","QLTV01002718.1:3423701-3424624","QLTV01002719.1:131043-131944","QLTV01002840.1:1682690-1683637","QLTV01002840.1:277428-278369","QLTV01002845.1:3972073-3973070","QLTV01002878.1:249609-250593","QLTV01002925.1:1621165-1622109","QLTV01002925.1:3933505-3934429","QLTV01002925.1:724207-725168","QLTV01002927.1:987112-988072","QLTV01002955.1:160839-161835","QLTV01003097.1:734567-735562","QLTV01003111.1:128974-129899","QLTV01003111.1:32676-33673","QLTV01003123.1:1101521-1102462","QLTV01003277.1:37217-38138","QLTV01003285.1:706407-707338","QLTV01003294.1:998706-999
625","QLTV01003313.1:415157-416065","QLTV01003388.1:1784581-1785566","QLTV01003388.1:1881361-1882356","QLTV01003388.1:3358793-3359739","QLTV01003390.1:1014115-1015018","QLTV01003390.1:2058481-2059402","QLTV01003391.1:2921542-2922457","QLTV01003392.1:191767-192734","QLTV01003397.1:384496-385479","QLTV01003402.1:1548676-1549660","QLTV01003426.1:32077-33030","QLTV01003432.1:279358-280302","QLTV01003442.1:1023125-1024064","QLTV01003456.1:3891325-3892312","QLTV01003457.1:505121-506038","QLTV01003459.1:787808-788800","QLTV01003467.1:348560-349555","QLTV01003479.1:2635221-2636155","QLTV01003654.1:1053531-1054447","QLTV01003654.1:1292361-1293344","QLTV01003654.1:626392-627359","QLTV01003675.1:409568-410517","QLTV01003677.1:171130-172102","QLTV01003690.1:1664629-1665567","QLTV01003690.1:2161335-2162240","QLTV01003760.1:841880-842808","QLTV01003771.1:2630430-2631357","QLTV01003771.1:3545667-3546617","QLTV01003783.1:360262-361241","QLTV01003783.1:973950-974897","QLTV01003789.1:299634-300579","QLTV01003900.1:1993756-19
94749","QLTV01003962.1:386473-387462","QLTV01003964.1:171777-172753","QLTV01003983.1:316948-317891","QLTV01003984.1:665732-666680","QLTV01004083.1:1746589-1747497","QLTV01004096.1:622037-622703","QLTV01004097.1:2251738-2252724","QLTV01004100.1:2660610-2661588","QLTV01004146.1:2881941-2882930","QLTV01004222.1:2396980-2397957","QLTV01004222.1:2397032-2397957","QLTV01004232.1:188994-189933","QLTV01004237.1:1333547-1334476","QLTV01004242.1:1340941-1341925","QLTV01004245.1:1207620-1208563","QLTV01004253.1:1929474-1930386","QLTV01004256.1:3682832-3683792","QLTV01004257.1:2606037-2606981","QLTV01004279.1:2038339-2039287","QLTV01004279.1:2038350-2039287","QLTV01004293.1:158596-159532","QLTV01004393.1:746305-747237","QLTV01004403.1:4098702-4099688","QLTV01004416.1:284531-285454","QLTV01004454.1:1734469-1735387","QLTV01009056.1:2625345-2626291","QLTV01012191.1:1332589-1333550","QLTV01012194.1:1329033-1329940","QLTV01012195.1:323899-324839","QLTV01020412.1:1-995","QLTV01020729.1:308925-309902","QLTV01000331.1:c1412896
-1411951","QLTV01000331.1:c1489479-1488504","QLTV01000331.1:c1563856-1562939","QLTV01000331.1:c806902-805924","QLTV01000383.1:c1152932-1151959","QLTV01000383.1:c784045-783084","QLTV01000392.1:c2449999-2449029","QLTV01000419.1:c1499961-1498976","QLTV01000419.1:c3761031-3760125","QLTV01000437.1:c1250374-1249408","QLTV01000437.1:c1250374-1249426","QLTV01000437.1:c827576-826596","QLTV01000548.1:c3481854-3480911","QLTV01000556.1:c667725-666768","QLTV01000597.1:c489212-488302","QLTV01000598.1:c396584-395649","QLTV01000601.1:c4262972-4261994","QLTV01000601.1:c4437984-4436997","QLTV01000602.1:c297056-296125","QLTV01000641.1:c850756-849809","QLTV01000769.1:c212069-211089","QLTV01000773.1:c912197-911229","QLTV01000785.1:c126105-125201","QLTV01000793.1:c304815-303843","QLTV01000804.1:c5948183-5947235","QLTV01000806.1:c1790354-1789380","QLTV01000831.1:c84969-84029","QLTV01000867.1:c1181176-1180190","QLTV01000867.1:c6306785-6305864","QLTV01000974.1:c12273763-12272784","QLTV01000974.1:c6209877-6208960","QLTV01000974.1:c9
150173-9149223","QLTV01000974.1:c9319951-9319004","QLTV01000995.1:c718503-717524","QLTV01001007.1:c3399114-3398173","QLTV01001126.1:c1064389-1063428","QLTV01001126.1:c1355122-1354189","QLTV01001126.1:c908958-908049","QLTV01001179.1:c1069612-1068685","QLTV01001179.1:c5654-4753","QLTV01001233.1:c323695-322784","QLTV01001316.1:c162760-161794","QLTV01001322.1:c3263306-3262329","QLTV01001324.1:c121395-120447","QLTV01001458.1:c5127031-5126041","QLTV01001472.1:c134077-133086","QLTV01001483.1:c6049204-6048245","QLTV01001680.1:c33610-32669","QLTV01001682.1:c1334128-1333165","QLTV01001682.1:c4247782-4246857","QLTV01001684.1:c235238-234312","QLTV01001700.1:c3045354-3044388","QLTV01001700.1:c67710-66715","QLTV01001726.1:c1089842-1088910","QLTV01001765.1:c998022-997037","QLTV01001769.1:c1005763-1004768","QLTV01001798.1:c684016-683026","QLTV01001798.1:c684016-683075","QLTV01001812.1:c687982-687029","QLTV01001816.1:c1344433-1343463","QLTV01001816.1:c1535611-1534684","QLTV01001816.1:c322588-321600","QLTV01001816.1:c322588-
321657","QLTV01001849.1:c2531452-2530515","QLTV01001849.1:c2784552-2783580","QLTV01002011.1:c1451841-1450897","QLTV01002011.1:c832855-831912","QLTV01002018.1:c532814-531903","QLTV01002103.1:c61938-60965","QLTV01002113.1:c684761-683787","QLTV01002264.1:c1002897-1001927","QLTV01002264.1:c1002897-1001991","QLTV01002264.1:c2841833-2840874","QLTV01002265.1:c6667756-6666845","QLTV01002419.1:c9128976-9128020","QLTV01002425.1:c2110909-2109996","QLTV01002426.1:c1471269-1470360","QLTV01002426.1:c517598-516641","QLTV01002430.1:c603541-603258","QLTV01002442.1:c581704-580799","QLTV01002447.1:c2608286-2607379","QLTV01002447.1:c3842935-3842030","QLTV01002485.1:c45336-44421","QLTV01002537.1:c416596-415654","QLTV01002544.1:c844398-843413","QLTV01002544.1:c844398-843443","QLTV01002544.1:c897086-896156","QLTV01002548.1:c817876-816887","QLTV01002549.1:c20884-19885","QLTV01002551.1:c547254-546340","QLTV01002554.1:c589362-588419","QLTV01002564.1:c511502-510560","QLTV01002566.1:c247580-246647","QLTV01002571.1:c1050070-1049091","Q
LTV01002571.1:c1127123-1126138","QLTV01002677.1:c3146308-3145378","QLTV01002693.1:c2546172-2545183","QLTV01002694.1:c4092429-4091515","QLTV01002694.1:c4450163-4449167","QLTV01002703.1:c348883-347933","QLTV01002715.1:c153568-152605","QLTV01002718.1:c2686256-2685323","QLTV01002718.1:c3513374-3512447","QLTV01002723.1:c17474-16489","QLTV01002845.1:c1180967-1180020","QLTV01002850.1:c1367369-1366414","QLTV01002873.1:c372087-371184","QLTV01002930.1:c705843-704942","QLTV01002931.1:c2840780-2839848","QLTV01002931.1:c730245-729301","QLTV01002931.1:c841610-840638","QLTV01002954.1:c354701-353744","QLTV01003110.1:c205809-204863","QLTV01003123.1:c422766-421790","QLTV01003123.1:c794212-793254","QLTV01003132.1:c4199432-4198499","QLTV01003139.1:c520915-520000","QLTV01003279.1:c1480845-1479895","QLTV01003284.1:c1888472-1887492","QLTV01003286.1:c1200712-1199806","QLTV01003286.1:c542443-541481","QLTV01003303.1:c244999-244054","QLTV01003309.1:c106865-105944","QLTV01003323.1:c2952031-2951036","QLTV01003359.1:c59478-58525","QLTV0
1003359.1:c59478-58562","QLTV01003387.1:c72786-71838","QLTV01003391.1:c3367778-3366803","QLTV01003395.1:c431960-431054","QLTV01003398.1:c748624-747667","QLTV01003415.1:c218894-217938","QLTV01003457.1:c1486938-1485981","QLTV01003457.1:c776141-775168","QLTV01003459.1:c706368-705464","QLTV01003470.1:c1140212-1139229","QLTV01003489.1:c97115-96145","QLTV01003648.1:c1029732-1028763","QLTV01003654.1:c5337098-5336194","QLTV01003659.1:c429436-428523","QLTV01003663.1:c2491644-2490653","QLTV01003669.1:c1310983-1310041","QLTV01003728.1:c1333724-1332809","QLTV01003768.1:c377474-376525","QLTV01003773.1:c806403-805492","QLTV01003785.1:c316658-315695","QLTV01003803.1:c1711649-1710699","QLTV01003983.1:c676717-675765","QLTV01003994.1:c2351760-2350831","QLTV01004082.1:c1855630-1854680","QLTV01004082.1:c3807920-3806923","QLTV01004086.1:c7482648-7481744","QLTV01004090.1:c531651-530714","QLTV01004092.1:c641174-640236","QLTV01004096.1:c216114-215203","QLTV01004096.1:c868586-867606","QLTV01004097.1:c1519961-1519019","QLTV01004111.
1:c239501-238583","QLTV01004118.1:c1261588-1260643","QLTV01004222.1:c2741737-2740748","QLTV01004233.1:c3008832-3007891","QLTV01004384.1:c28615-27658","QLTV01004426.1:c3939236-3938314","QLTV01004454.1:c1446020-1445084","QLTV01004460.1:c180574-179630","QLTV01012193.1:c2287481-2286499","QLTV01012194.1:c7788955-7787981","QLTV01012195.1:c2221972-2221022","QLTV01012198.1:c8318604-8317640","QLTV01020729.1:c2758101-2757193"))
"QLTV01004096.1:622037-622703" %in% ddrad.targets
loci.trimmed
which.Ns <- grep("N+N",proposed.loci)#
#
### DNAStringSet object containing the loci to trim#
loci.to.trim <- proposed.loci[which.Ns]#
#
### Start and end positions of the strings of Ns#
N.locs <- stringr::str_locate(string=loci.to.trim,pattern="N+N")#
#
### Start and end positions of the 5' and 3' non-ambiguous strings.#
left.pos     <- cbind(1,(N.locs[,1]-1))#
right.pos    <- cbind((N.locs[,2]+1),width(loci.to.trim))#
#
### Length of 3' and 5' non-ambiguous regions#
length.left  <- (N.locs[,1]-1)#
length.right <- width(loci.to.trim)-N.locs[,2]#
which.longer <- apply(X=cbind(length.left,length.right),MARGIN=1,FUN=function(x){which(x==max(x))})#
which.left   <- which(which.longer==1)#
which.right  <- which(which.longer==2)#
#
### DNAStringSets containing the trimmed loci.#
loci.trimmed.left  <- subseq(loci.to.trim[which.left],start=rep(1,length(which.left)),end=left.pos[,2][which.left])#
loci.trimmed.right <- subseq(loci.to.trim[which.right],start=right.pos[,1][which.right],end=right.pos[,2][which.right])#
#
### Old contig coordinates of loci to be trimmed#
old.coordinates.left        <- mat.strsplit(mgsub(c(".+:c",".+:"),c("",""),names(loci.trimmed.left)),split="-")#
old.coordinates.right       <- mat.strsplit(mgsub(c(".+:c",".+:"),c("",""),names(loci.trimmed.right)),split="-")#
mode(old.coordinates.left)  <- "numeric"#
mode(old.coordinates.right) <- "numeric"#
#
### New contig coordinates of loci to be trimmed#
new.coordinates.left  <- cbind(old.coordinates.left[,1],old.coordinates.left[,1]+(left.pos[which.left,2]-1))#
new.coordinates.right <- cbind((old.coordinates.right[,1]+right.pos[which.right,1]-1),old.coordinates.right[,2])#
new.names.left        <- paste0(mgsub(c(":c[1-9].+",":[1-9].+"),c(":c",":"),names(loci.trimmed.left)),new.coordinates.left[,1],"-",new.coordinates.left[,2])#
new.names.right       <- paste0(mgsub(c(":c[1-9].+",":[1-9].+"),c(":c",":"),names(loci.trimmed.right)),new.coordinates.right[,1],"-",new.coordinates.right[,2])#
#
### Rename the trimmed loci to the new genomic coordinates#
names(loci.trimmed.left)  <- new.names.left#
names(loci.trimmed.right) <- new.names.right#
loci.trimmed <- c(loci.trimmed.left,loci.trimmed.right)#
loci.trimmed <- loci.trimmed[match(unique(names(loci.trimmed)),names(loci.trimmed))]#
#
### DNAStringSet object of the proposed loci, including the trimmed loci#
proposed.loci.trimmed                        <- c(proposed.loci[-which.Ns],loci.trimmed)
"QLTV01004096.1:622037-622703" %in% names(proposed.loci.trimmed)
setdiff(ddrad.targets,names(proposed.loci.trimmed))
writeXStringSet(proposed.loci.trimmed,"/Users/alyssaleinweber/Documents/SequenceCapture-GitHub/ddRAD-like/Thermophis_ProposedLoci_CCTGCAGG-GAATTC_900to1000_trimmed.fas")
grep("c603541",names(proposed.loci))
names(proposed.loci)grep("c603541",names(proposed.loci))
names(proposed.loci)[grep("c603541",names(proposed.loci))]
names(proposed.loci)[grep("c603541",names(proposed.loci.trimmed))]
names(proposed.loci.trimmed)[grep("c603541",names(proposed.loci.trimmed))]
grep(":c",names(loci.trimmed.left))
new.coordinates.left.temp        <- cbind(old.coordinates.left[,1],old.coordinates.left[,1]+(left.pos[which.left,2]-1))
new.coordinates.left.temp[grep(":c",names(loci.trimmed.left)),2] <- old.coordinates.left[grep(":c",(names(loci.trimmed.left)),1]-(left.pos[which.left,2])+1)
new.coordinates.left.temp[grep(":c",names(loci.trimmed.left)),2] <- old.coordinates.left[grep(":c",(names(loci.trimmed.left)),1]-(left.pos[which.left[grep(":c",(names(loci.trimmed.left))],2])+1)
new.coordinates.left.temp[grep(":c",names(loci.trimmed.left)),2]
old.coordinates.left[grep(":c",(names(loci.trimmed.left)),1]
old.coordinates.left
grep(":c",(names(loci.trimmed.left))
grep(":c",(names(loci.trimmed.left)))
new.coordinates.left.temp[grep(":c",names(loci.trimmed.left)),2] <- old.coordinates.left[grep(":c",(names(loci.trimmed.left))),1]-(left.pos[which.left[grep(":c",(names(loci.trimmed.left))],2])+1)
old.coordinates.left[grep(":c",(names(loci.trimmed.left))),1]
(left.pos[which.left[grep(":c",(names(loci.trimmed.left))],2])+1)
(left.pos[which.left[grep(":c",(names(loci.trimmed.left)))],2])+1)
(left.pos[which.left[grep(":c",(names(loci.trimmed.left))),2])+1)
left.pos[which.left[,2])+1
left.pos[which.left[,2]+1
left.pos[which.left[,2]+1]
left.pos[which.left,2]+1
left.pos[which.left[grep(":c",(names(loci.trimmed.left)))],2]+1
old.coordinates.left[grep(":c",(names(loci.trimmed.left))),1]-(left.pos[which.left[grep(":c",(names(loci.trimmed.left)))],2]+1)
new.coordinates.left.temp        <- cbind(old.coordinates.left[,1],old.coordinates.left[,1]+(left.pos[which.left,2]-1))#
new.coordinates.left.temp[grep(":c",names(loci.trimmed.left)),2] <- old.coordinates.left[grep(":c",(names(loci.trimmed.left))),1]-(left.pos[which.left[grep(":c",(names(loci.trimmed.left)))],2]+1)
new.coordinates.left.temp
new.coordinates.left        <- cbind(old.coordinates.left[,1],old.coordinates.left[,1]+(left.pos[which.left,2]-1))#
new.coordinates.left[grep(":c",names(loci.trimmed.left)),2] <- old.coordinates.left[grep(":c",(names(loci.trimmed.left))),1]-(left.pos[which.left[grep(":c",(names(loci.trimmed.left)))],2]+1)
new.coordinates.right                                         <- cbind((old.coordinates.right[,1]+right.pos[which.right,1]-1),old.coordinates.right[,2])#
new.coordinates.right[grep(":c",names(loci.trimmed.right)),1] <- old.coordinates.right[grep(":c",(names(loci.trimmed.right))),1]-(right.pos[which.right[grep(":c",(names(loci.trimmed.right)))],2]+1)
new.coordinates.right
new.names.left        <- paste0(mgsub(c(":c[1-9].+",":[1-9].+"),c(":c",":"),names(loci.trimmed.left)),new.coordinates.left[,1],"-",new.coordinates.left[,2])#
new.names.right       <- paste0(mgsub(c(":c[1-9].+",":[1-9].+"),c(":c",":"),names(loci.trimmed.right)),new.coordinates.right[,1],"-",new.coordinates.right[,2])#
#
### Rename the trimmed loci to the new genomic coordinates#
names(loci.trimmed.left)  <- new.names.left#
names(loci.trimmed.right) <- new.names.right#
loci.trimmed <- c(loci.trimmed.left,loci.trimmed.right)#
loci.trimmed <- loci.trimmed[match(unique(names(loci.trimmed)),names(loci.trimmed))]#
#
### DNAStringSet object of the proposed loci, including the trimmed loci#
proposed.loci.trimmed                        <- c(proposed.loci[-which.Ns],loci.trimmed)
setdiff(ddrad.targets,names(proposed.loci.trimmed))
names(proposed.loci.trimmed)[grep("QLTV01002430.1:c603541",names(proposed.loci.trimmed))]
new.coordinates.left        <- cbind(old.coordinates.left[,1],old.coordinates.left[,1]+(left.pos[which.left,2]-1))#
new.coordinates.left[grep(":c",names(loci.trimmed.left)),2] <- old.coordinates.left[grep(":c",(names(loci.trimmed.left))),1]-(left.pos[which.left[grep(":c",(names(loci.trimmed.left)))],2]-1)#
#
new.coordinates.right                                         <- cbind((old.coordinates.right[,1]+right.pos[which.right,1]-1),old.coordinates.right[,2])#
new.coordinates.right[grep(":c",names(loci.trimmed.right)),1] <- old.coordinates.right[grep(":c",(names(loci.trimmed.right))),1]-(right.pos[which.right[grep(":c",(names(loci.trimmed.right)))],2]+1)#
#
new.names.left        <- paste0(mgsub(c(":c[1-9].+",":[1-9].+"),c(":c",":"),names(loci.trimmed.left)),new.coordinates.left[,1],"-",new.coordinates.left[,2])#
new.names.right       <- paste0(mgsub(c(":c[1-9].+",":[1-9].+"),c(":c",":"),names(loci.trimmed.right)),new.coordinates.right[,1],"-",new.coordinates.right[,2])#
#
### Rename the trimmed loci to the new genomic coordinates#
names(loci.trimmed.left)  <- new.names.left#
names(loci.trimmed.right) <- new.names.right#
loci.trimmed <- c(loci.trimmed.left,loci.trimmed.right)#
loci.trimmed <- loci.trimmed[match(unique(names(loci.trimmed)),names(loci.trimmed))]#
#
### DNAStringSet object of the proposed loci, including the trimmed loci#
proposed.loci.trimmed                        <- c(proposed.loci[-which.Ns],loci.trimmed)
setdiff(ddrad.targets,names(proposed.loci.trimmed))
new.names.right
new.coordinates.right                                         <- cbind((old.coordinates.right[,1]+right.pos[which.right,1]-1),old.coordinates.right[,2])#
#new.coordinates.right[grep(":c",names(loci.trimmed.right)),1] <- old.coordinates.right[grep(":c",(names(loci.trimmed.right))),1]-(right.pos[which.right[grep(":c",(names(loci.trimmed.right)))],2]+1)#
#
new.names.left        <- paste0(mgsub(c(":c[1-9].+",":[1-9].+"),c(":c",":"),names(loci.trimmed.left)),new.coordinates.left[,1],"-",new.coordinates.left[,2])#
new.names.right       <- paste0(mgsub(c(":c[1-9].+",":[1-9].+"),c(":c",":"),names(loci.trimmed.right)),new.coordinates.right[,1],"-",new.coordinates.right[,2])
new.names.right
old.coordinates.right[grep(":c",(names(loci.trimmed.right))),1]
(right.pos[which.right[grep(":c",(names(loci.trimmed.right)))],2]+1)
new.coordinates.right[grep(":c",names(loci.trimmed.right)),1] <- old.coordinates.right[grep(":c",(names(loci.trimmed.right))),2]+(right.pos[which.right[grep(":c",(names(loci.trimmed.right)))],2]-1)#
#
new.names.left        <- paste0(mgsub(c(":c[1-9].+",":[1-9].+"),c(":c",":"),names(loci.trimmed.left)),new.coordinates.left[,1],"-",new.coordinates.left[,2])#
new.names.right       <- paste0(mgsub(c(":c[1-9].+",":[1-9].+"),c(":c",":"),names(loci.trimmed.right)),new.coordinates.right[,1],"-",new.coordinates.right[,2])
new.names.right
(right.pos[which.right[grep(":c",(names(loci.trimmed.right)))],2]-1)
old.coordinates.right[grep(":c",(names(loci.trimmed.right))),1]-(left.pos[which.right[grep(":c",(names(loci.trimmed.right)))],2]-1)
new.coordinates.right[grep(":c",names(loci.trimmed.right)),1] <- old.coordinates.right[grep(":c",(names(loci.trimmed.right))),1]-(left.pos[which.right[grep(":c",(names(loci.trimmed.right)))],2]-1)
new.coordinates.right
new.coordinates.right[grep(":c",names(loci.trimmed.right)),1] <- old.coordinates.right[grep(":c",(names(loci.trimmed.right))),1]-(right.pos[which.right[grep(":c",(names(loci.trimmed.right)))],1]-1)
new.coordinates.right
which.Ns <- grep("N+N",proposed.loci)#
#
### DNAStringSet object containing the loci to trim#
loci.to.trim <- proposed.loci[which.Ns]#
#
### Start and end positions of the strings of Ns#
N.locs <- stringr::str_locate(string=loci.to.trim,pattern="N+N")#
#
### Start and end positions of the 5' and 3' non-ambiguous strings.#
left.pos     <- cbind(1,(N.locs[,1]-1))#
right.pos    <- cbind((N.locs[,2]+1),width(loci.to.trim))#
#
### Length of 3' and 5' non-ambiguous regions#
length.left  <- (N.locs[,1]-1)#
length.right <- width(loci.to.trim)-N.locs[,2]#
which.longer <- apply(X=cbind(length.left,length.right),MARGIN=1,FUN=function(x){which(x==max(x))})#
which.left   <- which(which.longer==1)#
which.right  <- which(which.longer==2)#
#
### DNAStringSets containing the trimmed loci.#
loci.trimmed.left  <- subseq(loci.to.trim[which.left],start=rep(1,length(which.left)),end=left.pos[,2][which.left])#
loci.trimmed.right <- subseq(loci.to.trim[which.right],start=right.pos[,1][which.right],end=right.pos[,2][which.right])#
#
### Old contig coordinates of loci to be trimmed#
old.coordinates.left        <- mat.strsplit(mgsub(c(".+:c",".+:"),c("",""),names(loci.trimmed.left)),split="-")#
old.coordinates.right       <- mat.strsplit(mgsub(c(".+:c",".+:"),c("",""),names(loci.trimmed.right)),split="-")#
mode(old.coordinates.left)  <- "numeric"#
mode(old.coordinates.right) <- "numeric"#
#
### New contig coordinates of loci to be trimmed#
new.coordinates.left        <- cbind(old.coordinates.left[,1],old.coordinates.left[,1]+(left.pos[which.left,2]-1))#
new.coordinates.left[grep(":c",names(loci.trimmed.left)),2] <- old.coordinates.left[grep(":c",(names(loci.trimmed.left))),1]-(left.pos[which.left[grep(":c",(names(loci.trimmed.left)))],2]-1)#
#
new.coordinates.right                                         <- cbind((old.coordinates.right[,1]+right.pos[which.right,1]-1),old.coordinates.right[,2])#
new.coordinates.right[grep(":c",names(loci.trimmed.right)),1] <- old.coordinates.right[grep(":c",(names(loci.trimmed.right))),1]-(right.pos[which.right[grep(":c",(names(loci.trimmed.right)))],1]-1)#
#
new.names.left        <- paste0(mgsub(c(":c[1-9].+",":[1-9].+"),c(":c",":"),names(loci.trimmed.left)),new.coordinates.left[,1],"-",new.coordinates.left[,2])#
new.names.right       <- paste0(mgsub(c(":c[1-9].+",":[1-9].+"),c(":c",":"),names(loci.trimmed.right)),new.coordinates.right[,1],"-",new.coordinates.right[,2])#
#
### Rename the trimmed loci to the new genomic coordinates#
names(loci.trimmed.left)  <- new.names.left#
names(loci.trimmed.right) <- new.names.right#
loci.trimmed <- c(loci.trimmed.left,loci.trimmed.right)#
loci.trimmed <- loci.trimmed[match(unique(names(loci.trimmed)),names(loci.trimmed))]#
#
### DNAStringSet object of the proposed loci, including the trimmed loci#
proposed.loci.trimmed                        <- c(proposed.loci[-which.Ns],loci.trimmed)
setdiff(ddrad.targets,names(proposed.loci.trimmed))
writeXStringSet(proposed.loci.trimmed,"/Users/alyssaleinweber/Documents/SequenceCapture-GitHub/ddRAD-like/Thermophis_ProposedLoci_CCTGCAGG-GAATTC_900to1000_trimmed.fas")
Thermophis.ddradlike.seqs <-proposed.loci.trimmed
Thamnophis.sirtalis.genome_url          <- "/Users/alyssaleinweber/Documents/genomes/genomes_seqs/GCF_001077635.1_Thamnophis_sirtalis-6.0_genomic.fna.gz"
Thamnophis.sirtalis.ddRADlike.50hits <- REEs::blast(method="blastn",subject=Thamnophis.sirtalis.genome_url, query=Thermophis.ddradlike.seqs,table.out="/Users/alyssaleinweber/Documents/SequenceCapture-GitHub/ddRAD-like/Thamnophis.sirtalis.ddRADlike.unlimitedhits_v2.txt")
nrow(Thamnophis.sirtalis.ddRADlike.50hits)
Thamnophis.sirtalis.ddRADlike.best.hits <- REEs::reportBestMatches(input.table=Thamnophis.sirtalis.ddRADlike.50hits, output.table.path="/Users/alyssaleinweber/Documents/SequenceCapture-GitHub/ddRAD-like/Thamnophis.sirtalis.ddRADlike.best.hits_v2.txt", remove.subseq.matches=F)
nrow(Thamnophis.sirtalis.ddRADlike.best.hits)
setdiff(ddrad.targets,Thamnophis.sirtalis.ddRADlike.50hits$qseqid)
setdiff(ddrad.targets,Thamnophis.sirtalis.ddRADlike.best.hits$qseqid)
length(setdiff(names(proposed.loci.trimmed),Thamnophis.sirtalis.ddRADlike.best.hits$qseqid))
setdiff(ddrad.targets,names(proposed.loci.trimmed)[1:1000])
ddrad.targets.seqs <- proposed.loci.trimmed[which(names(proposed.loci.trimmed) %in% ddrad.targets)]
ddrad.targets.seqs
length(unique(gsub(":.+","",ddrad.targets)))
length(ddrad.targets)
test <- length(unique(gsub(":.+","",proposed.loci.trimmed)))
length(test)
test
test <- length(unique(gsub(":.+","",names(proposed.loci.trimmed))))
test
test <- unique(gsub(":.+","",names(proposed.loci.trimmed)))
test[1:10]
test[1:10] %in% gsub(":.+","",names(ddrad.targets))
gsub(":.+","",names(ddrad.targets))[1:10]
names(ddrad.targets)[1:10]
test[1:10] %in% gsub(":.+","",ddrad.targets)
mean(width(ddrad.targets.seqs))
mean(width(proposed.loci.trimmed))
order(width(proposed.loci.trimmed))[1:10]
order(width(proposed.loci.trimmed),decreasing=T)[1:10]
proposed.loci.trimmed.ordered <- proposed.loci.trimmed[order(width(proposed.loci.trimmed),decreasing=T)]
test <- unique(gsub(":.+","",names(proposed.loci.trimmed.ordered)))
test[1:10] %in% gsub(":.+","",names(ddrad.targets))
test[1:10] %in% gsub(":.+","",ddrad.targets)
Thamnophis.sirtalis.ddRADlike.50hits <- REEs::blast(method="blastn",subject=Thamnophis.sirtalis.genome_url, query=Thermophis.ddradlike.seqs,table.out="/Users/alyssaleinweber/Documents/SequenceCapture-GitHub/ddRAD-like/Thamnophis.sirtalis.ddRADlike.unlimitedhits_v3.txt",eval=10)
nrow(Thamnophis.sirtalis.ddRADlike.50hits)
Thamnophis.sirtalis.ddRADlike.best.hits <- REEs::reportBestMatches(input.table=Thamnophis.sirtalis.ddRADlike.50hits, output.table.path="/Users/alyssaleinweber/Documents/SequenceCapture-GitHub/ddRAD-like/Thamnophis.sirtalis.ddRADlike.best.hits_v3.txt", remove.subseq.matches=F)
setdiff(ddrad.targets,Thamnophis.sirtalis.ddRADlike.50hits$qseqid)
setdiff(ddrad.targets,names(Thermophis.ddradlike.seqs))
setdiff(ddrad.targets,Thamnophis.sirtalis.ddRADlike.best.hits$qseqid)
sum(c(8,13,14,14,13,13,9,11,8,9,13,9,12,6,10,9,14,13,9,9,13,12,14,13,13,9,10,14,9,11,14,14,8,8,10,11,14,11,11,13,10,10,12,12,12,15,9,12,12,13,10,9,12,15,13,10,15,10,4,12,14,10,12,14,13,14,14,15,11,8,11,14,12,12,13,10,11,10,7,12,10,5,11,9,12,13,14,7,9,13,11,12,14,11,11,13,10,8,12,11,6,13,4,12,11,12,11,12,14,14,11,14,15,8,10,13,13,13,12,14,10,14,9,12,13,11,14,13,12,7,14,14,9,10,11,15,12,11,11,11,8,13,12,11,12,12,11,10,11,9,14,14,14,11,11,13,13,11,12,14,14,12,10,13,8,9,9,13,11,12,9,12,11,12,8,15,11,14,11,15,11,13,13,13,9,11,15,12,13,11,12,12,12,5,13,14,13,10,13,9,11,14,10,15,10,9,13,10,13,11,8,11,11,15,8,10,10,5,11,12,14,13,11,9,10,12,12,11,12,11,10,9,10,9,11,13,14,1,11,9,10,11,12,15,13,14,12,10,14,12,5,14,7,12,9,13,12,14,12,14,7,10,14,12,8,10,10,10,14,10,13,14,12,14,12,8,14,11,8,10,13,12,11,9,9,9,10,10,12,12,11,14,10,12,10,10,13,8,11,10,12,14,10,10,14,13,11,12,5,6,7,10,8,14,11,9,13,14,12,9,13,11,7,11,11,12,12,11))
writeXStringSet(ddrad.targets.seqs,"/Users/alyssaleinweber/Documents/SequenceCapture-GitHub/ddRAD-like/Thermophis_ProposedLoci_CCTGCAGG-GAATTC_900to1000_trimmed_targetted.fas")
length(ddrad.targets.seqs)
library(Biostrings)
library(ape,warn.conflicts=F)
sapply(X=c("stringr","data.table"),FUN=library,warn.conflicts=F)
sapply(X=c("stringr","data.table"),FUN=library,warn.conflicts=F,character.only=T)
lapply(X=c("seqinr","ips"),FUN=require,warn.conflicts=F,character.only=T)
sapply(X=c("seqinr","ips"),FUN=require,warn.conflicts=F,character.only=T)
lapply(X=c("seqinr","ips"),FUN=require,warn.conflicts=F,character.only=T)
lapply(X=c("seqinr","ips"),FUN=library,warn.conflicts=F,character.only=T)
?require
install_REEs <- function(packages.directory=.libPaths(),load.after.installation=F,token=NULL){#
	packages.dir   <- packages.directory#
	if(missing(packages.directory)| is.null(packages.directory)){#
		packages.dir <- .libPaths()#
	} else {#
		packages.dir <- packages.directory#
	}#
	# Not sure if its a good idea to set .libPaths within a function.#
#	.libPaths(packages.dir)#
	setwd(packages.dir)#
	### Load packages that that automatically included with R (R-core packages) and that are also needed for REEs#
	load.Rcore.dependencies   <- sapply(X=intersect(REEs.dependencies,Rcore.packages),FUN=library,character.only=T)#
	### It may or may not be a good idea to attach all of the packages currently in your namespace that intersect with REEs.dependencies to working environment.#
#	load.dependencies.in.Namespace <- sapply(X=intersect(REEs.dependencies,loadedNamespaces()),FUN=library,character.only=T)#
	### Get vector of REEs dependencies not in R-core packages.#
	REEs.dependencies.temp    <- setdiff(REEs.dependencies,Rcore.packages)#
	### Names of REEs dependencies that have not already been installed.#
	packages.to.install.temp  <- REEs.dependencies.temp[which(!(basename(REEs.dependencies.temp) %in% rownames(installed.packages(lib.loc=packages.dir))))]#
	### Install REEs dependencies that havent been installed. The order of installation defined in packages.to.install.temp decreases the chance of install failures.#
	if(length(packages.to.install.temp)!=0){#
		### Packages that depend on the BH package (Boost libraries). These will be installed last if they arent already installed.#
		wait.to.install       <- c("RSQLite","BiocParallel","Rsamtools","DECIPHER")#
		### The packages to load/install first. Internal order of entries also important.#
		packages.to.install   <-  setdiff(packages.to.install.temp,c("BH",wait.to.install))#
		### If there are any packages in packages.to.install, install them to packages.dir.#
		if(length(packages.to.install)!=0){#
			sapply(X=packages.to.install,FUN=REEs.Installer::package.check, pkgs.lib=packages.dir,deps=FALSE)#
		}#
		### Check that all packages in packages.to.install were successfully installed.#
		#which.failed <- packages.to.install[which(!(sapply(packages.to.install,basename) %in% c(rownames(installed.packages(lib.loc=packages.dir)),loadedNamespaces())))]#
		which.failed <- packages.to.install[which(!(basename(packages.to.install) %in% rownames(installed.packages(lib.loc=packages.dir))))]#
		if(length(which.failed)!=0){#
			### If any packages in packages.to.install were not installed, generate an error message indicating which package installs failed and then stop the install_REEs function.#
			stop("installation failed for packages",paste(which.failed))#
		} else {#
			### Load packages if they are not already in the loaded namespace.#
			packages.to.load <- setdiff(basename(packages.to.install),loadedNamespaces())#
			if(length(packages.to.load)>0){#
				### Returns the names of packages that were loaded.#
				colnames(sapply(X=packages.to.load,FUN=library,lib.loc=packages.dir,character.only=T))#
			}#
		}#
		### If the BH package is not installed to packages.dir and is not in the loaded namespace, then install "BH" to a temporary directory (not packages.dir).#
		### This package takes up a lot of space but it is only needed during installation for a few packages that need C++ compilation.#
		if(!("BH" %in% rownames(installed.packages(lib.loc=packages.dir))) & (!("BH" %in% loadedNamespaces()))){#
		#if(suppressWarnings(!require("BH", character.only = TRUE,lib.loc=packages.dir))){#
			### Define temporary directory where BH package should be installed#
			BH_tempdir <- tempdir()#
			### Install BH to BH_tempdir#
			BiocManager::install("BH",lib=BH_tempdir,dependencies=c("Depends", "Imports", "LinkingTo"))#
			### Check BH installation was successful#
			BH.check <- ("BH" %in% rownames(installed.packages(lib.loc=BH_tempdir)))#
			### If BH installation failed, generate a warning message and stop the install_REEs function, otherwise load and attach BH package.#
			if(!BH.check){#
				stop("installation failed for package BH")#
			} else {#
				library(BH,lib.loc=BH_tempdir)#
			}#
		} else {#
			### Load BH if it is installed in packages.dir but not yet loaded in any namespace, whereas dont install BH if it is in the loaded namespace even, if it isnt installed to packages.dir#
			if(("BH" %in% rownames(installed.packages(lib.loc=packages.dir))) & (!("BH" %in% loadedNamespaces()))){#
				library(BH,lib.loc=packages.dir)#
			}#
		}#
		### Install packages that need BH during installation if they are not already installed.#
		if(length(wait.to.install)!=0){#
			sapply(X=wait.to.install,FUN=REEs.Installer::package.check, pkgs.lib=packages.dir,deps=FALSE)#
		}#
		### Check if any of the BH-dependent packages failed to install.#
		which.failed2 <- wait.to.install[which(!(basename(wait.to.install) %in% rownames(installed.packages(lib.loc=packages.dir))))]#
		### If any of the BH-dependent packages failed to install, generate a warning message and stop the install_REEs function.#
		if(length(which.failed2)!=0){#
			stop("installation failed for packages",paste(which.failed2))#
		} else {#
			### Load BH-dependent packages if they are not already in the loaded namespace.#
			packages.to.load2 <- setdiff(basename(which.failed2),loadedNamespaces())#
			if(length(packages.to.load2)>0){#
				### Returns the names of BH-dependent packages that were just loaded.#
				colnames(sapply(X=packages.to.load2,FUN=library,lib.loc=packages.dir,character.only=T))#
			}#
		}#
	}#
	#### At this point, all of the REEs dependencies should be installed and loaded into the namespace. Time to install REEs packages.#
	# REEs.current is the data object that holds the url to the pre-build (.zip) REEs package#
	# REEs.url is the data object that holds the url to the post-build (tar.gz) REEs package#
	#####
	# Define temporary directory where REEs tar.gz file should be download; this is not where the package will be installed.#
	REEs_tempdir  <- tempdir()#
	### Download the tar.gz to REEs_tempdir#
	download.file(url=REEs.url,destfile=paste0(REEs_tempdir,"/REEs.tar.gz"))#
	### Install REEs to packages.dir#
	install.command <- paste("R CMD INSTALL -l",packages.dir,paste0("'",paste0(REEs_tempdir,"/REEs.tar.gz"),"'"))#
	system(install.command)#
	### Confirm that REEs was successfully installed. If not, generate a warning message and stop install_REEs function.#
	if(!("REEs" %in% rownames(installed.packages(lib.loc=packages.dir)))){#
		stop("REEs dependencies successfully installed and loaded, but REEs installation failed.")#
	} else {#
		### Load and attach REEs if load.after.installation=T, otherwise  #
		if(load.after.installation){#
			library("REEs",lib.loc=packages.dir,character.only = TRUE)#
			return("DONE")#
		} else {#
			return("DONE")#
		}#
	}#
}
library(REEs)
REEs::datasets(1)
Podarcis.muralis.genome_url        <- REEs::datasets(1)[which(datasets(1)[,1]=="Podarcis muralis"),2]
Podarcis.muralis.genome_url
Aspidoscelis.marmoratus.genome_url <- REEs::datasets(1)[which(datasets(1)[,1]=="Aspidoscelis marmoratus"),2]#
Lacerta.viridis.genome_url         <- REEs::datasets(1)[which(datasets(1)[,1]=="Lacerta viridis"),2]#
Lacerta.bilineata.genome_url       <- REEs::datasets(1)[which(datasets(1)[,1]=="Lacerta bilineata"),2]#
Lacerta.agilis.genome_url          <- REEs::datasets(1)[which(datasets(1)[,1]=="Lacerta agilis"),2]#
Zootoca.vivipara.genome_url        <- REEs::datasets(1)[which(datasets(1)[,1]=="Zootoca vivipara"),2]
Podarcis.muralis.genome_url       #
Aspidoscelis.marmoratus.genome_url#
Lacerta.viridis.genome_url        #
Lacerta.bilineata.genome_url      #
Lacerta.agilis.genome_url         #
Zootoca.vivipara.genome_url
REEs::datasets(1)[which(datasets(1)[,1]=="Podarcis muralis"),3]
REEs::datasets(1)[which(datasets(1)[,1]=="Aspidoscelis marmoratus"),3]
REEs::datasets(1)[which(datasets(1)[,1]=="Lacerta viridis"),3]
REEs::datasets(1)[which(datasets(1)[,1]=="Lacerta bilineata"),3]
REEs::datasets(1)[which(datasets(1)[,1]=="Lacerta agilis"),3]
REEs::datasets(1)[which(datasets(1)[,1]=="Zootoca vivipara"),3]
REEs::datasets(1)[which(datasets(1)[,1]=="Salvator merianae"),3]
Podarcis.muralis_GFF.url <- "https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/004/329/235/GCF_004329235.1_PodMur_1.0/GCF_004329235.1_PodMur_1.0_genomic.gff.gz"#
Lacerta.agilis_GFF.url   <- "https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/009/819/535/GCF_009819535.1_rLacAgi1.pri/GCF_009819535.1_rLacAgi1.pri_genomic.gff.gz"#
Zootoca.vivipara_GFF.url <- "https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/011/800/845/GCF_011800845.1_UG_Zviv_1/GCF_011800845.1_UG_Zviv_1_genomic.gff.gz"
Podarcis.muralis_GFF  <- load.gff(input=Podarcis.muralis_GFF.url,local=F)
Lacerta.agilis_GFF    <- load.gff(input=Lacerta.agilis_GFF.url,local=F)
Podarcis.muralis_GFF[1:10,]
Zootoca.vivipara_GFF  <- load.gff(input=Zootoca.vivipara_GFF.url,local=F)
class(Zootoca.vivipara_GFF)
Zootoca.vivipara_GFF
length(unique(Zootoca.vivipara_GFF$seqid))
length(unique(Podarcis.muralis_GFF$seqid))
length(unique(Lacerta.agilis_GFF$seqid))
length(grep("CDS",Lacerta.agilis_GFF$type))
length(grep("gene",Podarcis.muralis_GFF$type))
length(grep("gene",Lacerta.agilis_GFF$type))
length(grep("gene",Zootoca.vivipara_GFF$type))
length(grep("CDS",Podarcis.muralis_GFF$type))
length(grep("CDS",Zootoca.vivipara_GFF$type))
Lacerta.agilis_GFF_CDS_longer120bp <- filter.gff(input.gff=Lacerta.agilis_GFF,feature.type="CDS",min.length=120)
nrow(Lacerta.agilis_GFF_CDS_longer120bp)
nrow(Lacerta.agilis_GFF)
write.table(x=Lacerta.agilis_GFF_CDS_longer120bp,file="/Users/alyssaleinweber/Documents/SequenceCapture-GitHub/Lacerta.agilis_GFF_CDS_longer120bp.txt",quote=F,sep="\t",row.names=F,col.names=T)
Lacerta.agilis_exome   <- get.seqs.from.gff(input.seqs=Lacerta.agilis_genome.path,input.gff=Lacerta.agilis_GFF_CDS_longer120bp)
Lacerta.agilis_exome   <- get.seqs.from.gff(input.seqs=Lacerta.agilis.genome_url,input.gff=Lacerta.agilis_GFF_CDS_longer120bp)
Lacerta.agilis_GFF_CDS_longer120bp[1:10,]
download.file(url=Lacerta.agilis.genome_url, destfile="/Users/alyssaleinweber/Documents/SequenceCapture-GitHub/GCF_009819535.1_rLacAgi1.pri_genomic.fna.gz")
input.seqs="/Users/alyssaleinweber/Documents/SequenceCapture-GitHub/GCF_009819535.1_rLacAgi1.pri_genomic.fna.gz";input.gff=Lacerta.agilis_GFF_CDS_longer120bp
output.path = NULL;additional.ID=NULL
if("character" %in% class(input.gff)){#
		filtered.gff1B   <- data.table::fread(input.gff)#
	}#
	if("data.frame" %in% class(input.gff)){#
		filtered.gff1B   <- input.gff#
	}
refseq.names     <- unlist(filtered.gff1B[,1])#
	if(!is.null(additional.ID)){#
		### This is needed because the names in the gff file are not exactly the same as the ones in the genome file; they both link to a common Genbank Accession # though#
		ScaffoldKey      <- data.table::fread(additional.ID)#
		### Links the names in the gff file to the names of the CDS matches#
		alt.scaff.names  <- ScaffoldKey$ScaffoldName[match(refseq.names,ScaffoldKey$RefSeq.ScaffoldAccession)]#
		subject.id       <- alt.scaff.names#
		subject.start    <- as.numeric(filtered.gff1B$start)#
		subject.end      <- as.numeric(filtered.gff1B$end)#
		new.names        <- paste0(subject.id,"_",refseq.names,":",subject.start,"-",subject.end)	#
	} else {#
		subject.id       <- refseq.names#
		subject.start    <- as.numeric(filtered.gff1B$start)#
		subject.end      <- as.numeric(filtered.gff1B$end)#
		new.names        <- paste0(refseq.names,":",subject.start,"-",subject.end)	#
	}
length(refseq.names)
refseq.names[1]
"DNAStringSet" %in% class(input.seqs)
file.exists(input.seqs)
if("DNAStringSet" %in% class(input.seqs)){#
		subject.path <- tempfile()#
		# fa               <- input.seqs#
		# headers          <- names(input.seqs)#
		# contig.names     <- mat.strsplit(headers)[,1]#
		# names(fa)        <- contig.names#
		Biostrings::writeXStringSet(x = subject, filepath=subject.path, append=F, format="fasta")#
		delete.subject <- T#
	} else {#
		if(file.exists(input.seqs)){#
			subject.path   <- input.seqs#
			delete.subject <- F#
		} else {#
			subject.path <- tempfile()#
			# Sets time limit for downloading files to 1000 seconds#
			options(timeout=1000)#
			utils::download.file(url=input.seqs, destfile=subject.path)#
			delete.subject <- T#
		}#
	}
summary(file(input.seqs.path))$class != "gzfile"
input.seqs.path <- subject.path
summary(file(input.seqs.path))$class != "gzfile"
headers        <- Biostrings::fasta.index(input.seqs.path)$desc
length(headers)
fa             <- Biostrings::readDNAStringSet(filepath=input.seqs.path)
contig.names   <- mat.strsplit(headers)[,1]
headers[1]
mat.strsplit(headers)
length(headers)
headers
contig.names   <- gsub(" .+","",headers)
contig.names
names(fa)      <- contig.names
scaff.matches.all  <- match(subject.id, contig.names)
start.all          <- apply(X=cbind(subject.start,subject.end),MARGIN=1,FUN=min)
end.all            <- apply(X=cbind(subject.start,subject.end),MARGIN=1,FUN=max)
subranges          <- IRanges::IRanges(start=start.all ,end=end.all,names=subject.id)
gsubranges         <- GenomicRanges::GRanges(seqnames=subject.id,ranges=subranges)
output.seqs        <- Biostrings::getSeq(fa, gsubranges)
showMethods("getSeq")
?getSeq
output.seqs        <- fa[gsubranges)
output.seqs        <- fa[gsubranges]
?GenomicRanges
library(Biostrings)
output.seqs        <- Biostrings::getSeq(fa, gsubranges)
library(BSgenome)
output.seqs        <- Biostrings::getSeq(fa, gsubranges)
required.packages("BSGenome")
setwd("BSGenome","REEs")
setdiff(required.packages("BSGenome"),required.packages("REEs"))
getSeq
package.load.order("BSGenome")
test <- fa[[gsubranges]]
test <- fa[gsubranges]
test[1]
length(test)
length(output.seqs)
output.seqs[1]
required.packages("Biobase")
required.packages("DelayedArray")
required.packages("GenomicAlignments")
required.packages("MatrixGenerics")
install.packages("MatrixGenerics")
library(BiocManager)
BiocManager::install("MatrixGenerics")
required.packages("matrixStats")
BiocManager::install("rtracklayer")
required.packages("rtracklayer")
required.packages("SummarizedExperiment")
library(REEs)
devtools::install_github("JeffWeinell/REEs",auth_token="323d9e4cd00247a39a805dbb66f37db6403cfb8b")
library(devtools)
library(REEs)
devtools::install_github("JeffWeinell/REEs",auth_token="323d9e4cd00247a39a805dbb66f37db6403cfb8b")
library(REEs)
getwd()
setwd("Documents/REEs")
devtools::document()
devtools::build()
devtools::install()
library(REEs)
.libPaths()
getwd()
devtools::load_all()
library(REEs)
devtools::document()
devtools::build()
devtools::install()
library(REEs)
search()
getwd()
devtools::load_all()
search()
