wapply(x=seq1,FUN=complexity,windowsize=50,windowshift=50)
wapply(x=seq1,FUN=complexity,windowsize=40,windowshift=50)
wapply(x=seq1,FUN=complexity,windowsize=30,windowshift=50)
wapply(x=seq1,FUN=complexity,windowsize=10,windowshift=50)
wapply(x=seq1,FUN=complexity,windowsize=50,windowshift=50)
wapply(x=seq1,FUN=complexity,windowsize=55,windowshift=50)
wapply(x=seq1,FUN=complexity,windowsize=100,windowshift=50)
wapply(x=seq1,FUN=complexity,windowsize=100,windowshift=100)
wapply(x=seq1,FUN=complexity,windowsize=100)
wapply <- function(x,FUN,windowsize=NULL,windowshift=NULL,startbase=1,remainder=T){#
	if(class(x)=="DNAString"){#
		x <- as.character(unlist(x))#
	}#
	if(length(x)>1){#
		stop("Sequences must supplied as a DNAString object or a length 1 DNAStringSet object")#
	}#
	if(class(x)=="DNAStringSet"){#
		x <- as.list(x[1])[[1]]#
	}#
	tempseq       <- unlist(strsplit(as.character(unlist(x)),split=""))#
	if(is.null(windowsize)){#
		windowsize <- length(tempseq)#
	}#
	if(is.null(windowshift)){#
		windowshift <- windowsize#
	}#
	window.starts <- seq(from=startbase,to=length(tempseq),by=windowshift)#
	window.ends   <- window.starts+(windowsize-1)#
	window.starts[!window.starts <= length(tempseq)] <- length(tempseq)#
	window.ends[!window.ends <= length(tempseq)] <- length(tempseq)#
	windows.mat   <- unique(cbind(window.starts,window.ends))#
	if(!remainder){#
		windows.mat <- windows.mat[((windows.mat[,2]-windows.mat[,1])+1)==windowsize,]#
	}#
	window.starts <- windows.mat[,1]#
	window.ends   <- windows.mat[,2]#
	funres <- list(); length(funres) <- length(window.starts)#
	for(i in 1:length(window.starts)){#
		windowseq <- DNAString(paste(tempseq[window.starts[i]:window.ends[i]],collapse=""))#
		funres[[i]] <- FUN(windowseq)#
	}#
	classes <- lapply(funres, class)#
	if(all(lengths(funres)==1) & length(unique(unlist(classes)))==1){#
		funres <- unlist(funres)#
	}#
	funres#
}
wapply(x=seq1,FUN=complexity,windowsize=100)
wapply(x=seq1,FUN=complexity,windowsize=100)
wapply(x=seq1,FUN=complexity,windowsize=10)
wapply(x=seq1,FUN=complexity,windowsize=1)
wapply(x=seq1,FUN=complexity,windowsize=2)
wapply(x=seq1,FUN=complexity,windowsize=3)
wapply(x=seq1,FUN=complexity,windowsize=4)
wapply(x=seq1,FUN=complexity,windowsize=5)
wapply(x=seq1,FUN=complexity,windowsize=6)
wapply(x=seq1,FUN=complexity,windowsize=7)
wapply(x=seq1,FUN=complexity,windowsize=8)
wapply(x=seq1,FUN=complexity,windowsize=9)
wapply(x=seq1,FUN=complexity,windowsize=9,remainder=F)
wapply(x=seq1,FUN=complexity,windowsize=3,remainder=F)
wapply <- function(x,FUN,windowsize=NULL,windowshift=NULL,startbase=1,remainder=T,minwindowsize=2){#
	if(class(x)=="DNAString"){#
		x <- as.character(unlist(x))#
	}#
	if(length(x)>1){#
		stop("Sequences must supplied as a DNAString object or a length 1 DNAStringSet object")#
	}#
	if(class(x)=="DNAStringSet"){#
		x <- as.list(x[1])[[1]]#
	}#
	tempseq       <- unlist(strsplit(as.character(unlist(x)),split=""))#
	if(is.null(windowsize)){#
		windowsize <- length(tempseq)#
	}#
	if(is.null(windowshift)){#
		windowshift <- windowsize#
	}#
	window.starts <- seq(from=startbase,to=length(tempseq),by=windowshift)#
	window.ends   <- window.starts+(windowsize-1)#
	window.starts[!window.starts <= length(tempseq)] <- length(tempseq)#
	window.ends[!window.ends <= length(tempseq)] <- length(tempseq)#
	windows.mat   <- unique(cbind(window.starts,window.ends))#
	if(!remainder){#
		windows.mat <- windows.mat[((windows.mat[,2]-windows.mat[,1])+1)==windowsize,]#
	}#
	if(windowsize >= minwindowsize){#
		windows.mat <- windows.mat[((windows.mat[,2]-windows.mat[,1])+1)>=minwindowsize,]#
	}#
	window.starts <- windows.mat[,1]#
	window.ends   <- windows.mat[,2]#
	funres <- list(); length(funres) <- length(window.starts)#
	for(i in 1:length(window.starts)){#
		windowseq <- DNAString(paste(tempseq[window.starts[i]:window.ends[i]],collapse=""))#
		funres[[i]] <- FUN(windowseq)#
	}#
	classes <- lapply(funres, class)#
	if(all(lengths(funres)==1) & length(unique(unlist(classes)))==1){#
		funres <- unlist(funres)#
	}#
	funres#
}
wapply(x=seq1,FUN=complexity,windowsize=9)
wapply(x=seq1,FUN=complexity,windowsize=3)
getwd()
setwd("Documents/REEs")
library(devtools)
devtools::document()
rm(list = c("complexity", "wapply"))
devtools::document()
Psammodynastes.dna <- readDNAStringSet("/users/jeff/Documents/Psammodynastes-pulverulentus_KU329686_consensus-contigs-dipspades.fa")
Psammodynastes.dna <- readDNAStringSet("/users/jeff/Downloads/Psammodynastes-pulverulentus_KU329686_consensus-contigs-dipspades.fa")
Psammodynastes.dna
Psammodynastes.dna[1]
Psammodynastes.dna[1]; wapply(x=Psammodynastes.dna,FUN=complexity,windowsize=10,window.shift=5)
Psammodynastes.dna[1]; test <- wapply(x=Psammodynastes.dna,FUN=complexity,windowsize=10,windowshift=5)
test <- wapply(x=Psammodynastes.dna[1],FUN=complexity,windowsize=10,windowshift=5)
length(test)
test[1:100]
plot(1:length(test),test)
lineplot(1:length(test),test)
plot(1:length(test),test,type="l")
test2 <- wapply(x=Psammodynastes.dna[1],FUN=complexity,windowsize=100,windowshift=50)
lines(1:length(test2),test2,col="red")
plot(seq(from=1,to=width(Psammodynastes.dna[1]),by=5),test,type="l")
lines(seq(from=1,to=width(Psammodynastes.dna[1]),by=50),test2,col="red")
seq1 <- DNAString(paste(sample(c("A","C","G","T"),size=6640,replace=T),collapse=""))
test3 <- wapply(x=seq1,FUN=complexity,windowsize=100,windowshift=50)
lines(seq(from=1,to=width(seq1),by=50),test2,col="blue")
lines(seq(from=1,to=length(seq1),by=50),test2,col="blue")
lines(seq(from=1,to=width(Psammodynastes.dna[1]),by=50),test2,col="blue")
lines(seq(from=1,to=width(Psammodynastes.dna[1]),by=50),test2,col="red")
lines(seq(from=1,to=width(Psammodynastes.dna[1]),by=50),test2,col="red")
lines(seq(from=1,to=width(seq1),by=50),test3,col="blue")
lines(seq(from=1,to=length(seq1),by=50),test3,col="blue")
#' @title Plot sliding window DNA complexity#
#'#
#' Plots sequence complexity of an input DNA sequence along sliding windows and a random sequence of the same length.#
#' Black line shows complexity of the indput DNA sequence for a sliding window with windowsize=10 and windowshift=5#
#' Red line shows complexity of the indput DNA sequence for a sliding window with windowsize=100 and windowshift=50#
#' Blue line shows complexity of the randomly generated DNA sequence using a sliding window with windowsize=100 and windowshift=50#
#' #
#' @param dna Character string, or a DNAString object, or a length 1 DNAStringSet object as defined by the Biostrings package.#
#' @return NULL#
#' @export complexityPlot#
complexityPlot <- function(dna){#
	dna   <- DNAStringSet(dna)#
	test1 <- wapply(x=dna, FUN=complexity, windowsize=10, windowshift=5)#
	test2 <- wapply(x=dna, FUN=complexity, windowsize=100, windowshift=50)#
	sim1  <- DNAStringSet(paste(sample(c("A","C","G","T"),size=width(dna),replace=T),collapse=""))#
	test3 <- wapply(x=sim1, FUN=complexity, windowsize=100, windowshift=50)#
	plot(seq(from=1,to=width(dna),by=5),test1,type="l")#
	lines(seq(from=1,to=width(dna),by=50),test2,col="red")#
	lines(seq(from=1,to=width(sim1),by=50),test3,col="blue")#
}
complexityPlot(Psammodynastes.dna[1])
complexityPlot <- function(dna){#
	dna   <- DNAStringSet(dna)#
	test1 <- wapply(x=dna, FUN=complexity, windowsize=10, windowshift=5)#
	test2 <- wapply(x=dna, FUN=complexity, windowsize=100, windowshift=50)#
	sim1  <- DNAStringSet(paste(sample(c("A","C","G","T"),size=width(dna),replace=T),collapse=""))#
	test3 <- wapply(x=sim1, FUN=complexity, windowsize=100, windowshift=50)#
	plot(seq(from=1,to=width(dna),by=5),test1,type="l",xlab="nucleotide position along sequence",ylab="DNA sequence complexity")#
	lines(seq(from=1,to=width(dna),by=50),test2,col="red")#
	lines(seq(from=1,to=width(sim1),by=50),test3,col="blue")#
}
complexityPlot(Psammodynastes.dna[1])
complexityPlot <- function(dna){#
	dna   <- DNAStringSet(dna)#
	test1 <- wapply(x=dna, FUN=complexity, windowsize=10, windowshift=5)#
	test2 <- wapply(x=dna, FUN=complexity, windowsize=100, windowshift=50)#
	sim1  <- DNAStringSet(paste(sample(c("A","C","G","T"),size=width(dna),replace=T),collapse=""))#
	test3 <- wapply(x=sim1, FUN=complexity, windowsize=100, windowshift=50)#
	plot(seq(from=1,to=width(dna),by=5),test1,type="l",xlab="nucleotide position along sequence",ylab="DNA sequence complexity",sub="black and red = empirical; blue random")#
	lines(seq(from=1,to=width(dna),by=50),test2,col="red")#
	lines(seq(from=1,to=width(sim1),by=50),test3,col="blue")#
}
complexityPlot(Psammodynastes.dna[1])
complexityPlot <- function(dna){#
	dna   <- DNAStringSet(dna)#
	test1 <- wapply(x=dna, FUN=complexity, windowsize=10, windowshift=5)#
	test2 <- wapply(x=dna, FUN=complexity, windowsize=100, windowshift=50)#
	sim1  <- DNAStringSet(paste(sample(c("A","C","G","T"),size=width(dna),replace=T),collapse=""))#
	test3 <- wapply(x=sim1, FUN=complexity, windowsize=100, windowshift=50)#
	plot(seq(from=1,to=width(dna),by=5),test1,type="l",xlab="nucleotide position along sequence",ylab="DNA sequence complexity",sub="black and red = empirical; blue = random")#
	lines(seq(from=1,to=width(dna),by=50),test2,col="red")#
	lines(seq(from=1,to=width(sim1),by=50),test3,col="blue")#
}
complexityPlot <- function(dna){#
	dna   <- DNAStringSet(dna)#
	test1 <- wapply(x=dna, FUN=complexity, windowsize=10, windowshift=5)#
	test2 <- wapply(x=dna, FUN=complexity, windowsize=100, windowshift=50)#
	sim1  <- DNAStringSet(paste(sample(c("A","C","G","T"),size=width(dna),replace=T),collapse=""))#
	test3 <- wapply(x=sim1, FUN=complexity, windowsize=100, windowshift=50)#
	plot(seq(from=1,to=width(dna),by=5),test1,type="l",xlab="nucleotide position along sequence",ylab="DNA sequence complexity",sub="black and red = empirical; blue = random")#
	lines(seq(from=1,to=width(dna),by=50),test2,col="red")#
	lines(seq(from=1,to=width(sim1),by=50),test3,col="blue")#
}
complexityPlot(Psammodynastes.dna[1])
complexityPlot(Psammodynastes.dna[2])
complexityPlot(Psammodynastes.dna[3])
complexityPlot(Psammodynastes.dna[4])
complexityPlot(Psammodynastes.dna[5])
complexityPlot <- function(dna){#
	dna   <- DNAStringSet(dna)#
	test1 <- wapply(x=dna, FUN=complexity, windowsize=10, windowshift=5)#
	test2 <- wapply(x=dna, FUN=complexity, windowsize=200, windowshift=100)#
	sim1  <- DNAStringSet(paste(sample(c("A","C","G","T"),size=width(dna),replace=T),collapse=""))#
	test3 <- wapply(x=sim1, FUN=complexity, windowsize=200, windowshift=100)#
	plot(seq(from=1,to=width(dna),by=5),test1,type="l",xlab="nucleotide position along sequence",ylab="DNA sequence complexity",sub="black and red = empirical; blue = random")#
	lines(seq(from=1,to=width(dna),by=50),test2,col="red")#
	lines(seq(from=1,to=width(sim1),by=50),test3,col="blue")#
}
complexityPlot(Psammodynastes.dna[5])
seq(from=1,to=10,length.out=2)
complexityPlot <- function(dna){#
	dna   <- DNAStringSet(dna)#
	test1 <- wapply(x=dna, FUN=complexity, windowsize=10, windowshift=5)#
	test2 <- wapply(x=dna, FUN=complexity, windowsize=200, windowshift=100)#
	sim1  <- DNAStringSet(paste(sample(c("A","C","G","T"),size=width(dna),replace=T),collapse=""))#
	test3 <- wapply(x=sim1, FUN=complexity, windowsize=200, windowshift=100)#
	plot(seq(from=1,to=width(dna),length.out=length(test1)),test1,type="l",xlab="nucleotide position along sequence",ylab="DNA sequence complexity",sub="black and red = empirical; blue = random")#
	lines(seq(from=1,to=width(dna),length.out=length(test2)),test2,col="red")#
	lines(seq(from=1,to=width(sim1),length.out=length(test3)),test3,col="blue")#
}
seq(from=1,to=10,length.out=2)
complexityPlot(Psammodynastes.dna[5])
complexityPlot(Psammodynastes.dna[1])
complexityPlot <- function(dna,size=1){#
	dna   <- DNAStringSet(dna)#
	test1 <- wapply(x=dna, FUN=complexity, windowsize=10, windowshift=5)#
	test2 <- wapply(x=dna, FUN=complexity, windowsize=200, windowshift=100)#
	sim1  <- DNAStringSet(paste(sample(c("A","C","G","T"),size=width(dna),replace=T),collapse=""))#
	test3 <- wapply(x=sim1, FUN=complexity, windowsize=200, windowshift=100)#
	plot(seq(from=1,to=width(dna),length.out=length(test1)),test1,type="l",xlab="nucleotide position along sequence",ylab="DNA sequence complexity",sub="black and red = empirical; blue = random")#
	lines(seq(from=1,to=width(dna),length.out=length(test2)),test2,col="red")#
	lines(seq(from=1,to=width(sim1),length.out=length(test3)),test3,col="blue")#
}
complexityPlot <- function(dna,wsize=1){#
	dna   <- DNAStringSet(dna)#
	test1 <- wapply(x=dna, FUN=complexity, windowsize=10, windowshift=5)#
	test2 <- wapply(x=dna, FUN=complexity, windowsize=200*wsize, windowshift=100*wsize)#
	sim1  <- DNAStringSet(paste(sample(c("A","C","G","T"),size=width(dna),replace=T),collapse=""))#
	test3 <- wapply(x=sim1, FUN=complexity, windowsize=200*wsize, windowshift=100*wsize)#
	plot(seq(from=1,to=width(dna),length.out=length(test1)),test1,type="l",xlab="nucleotide position along sequence",ylab="DNA sequence complexity",sub="black and red = empirical; blue = random")#
	lines(seq(from=1,to=width(dna),length.out=length(test2)),test2,col="red")#
	lines(seq(from=1,to=width(sim1),length.out=length(test3)),test3,col="blue")#
}
complexityPlot(Psammodynastes.dna[5])
complexityPlot(Psammodynastes.dna[5],wsize=0.5)
complexityPlot(Psammodynastes.dna[5],wsize=0.2)
complexityPlot(Psammodynastes.dna[5],wsize=2)
complexityPlot(Psammodynastes.dna[5],wsize=10)
complexityPlot(Psammodynastes.dna[1],wsize=10)
complexityPlot(Psammodynastes.dna[2],wsize=10)
complexityPlot(Psammodynastes.dna[3],wsize=10)
complexityPlot(Psammodynastes.dna[4],wsize=10)
complexity <- function(x,w=1){#
	if(class(x)=="DNAString"){#
		x <- as.character(unlist(x))#
	}#
	if(length(x)>1){#
		stop("Sequences must supplied as a DNAString object or a length 1 DNAStringSet object")#
	}#
	if(class(x)=="DNAStringSet"){#
		x <- as.list(x[1])[[1]]#
	}#
	tempseq <- unlist(strsplit(as.character(unlist(x)),split=""))#
	res     <- length(which(sapply(1:(length(tempseq)-1),function(i){length(unique(tempseq[i:(i+w)]))!=1})))/length(tempseq)#
	res#
}
complexityPlot <- function(dna,wsize=1){#
	dna   <- DNAStringSet(dna)#
	test1 <- wapply(x=dna, FUN=complexity, windowsize=10, windowshift=5)#
	test2 <- wapply(x=dna, FUN=complexity, windowsize=200*wsize, windowshift=100*wsize)#
	sim1  <- DNAStringSet(paste(sample(c("A","C","G","T"),size=width(dna),replace=T),collapse=""))#
	test3 <- wapply(x=sim1, FUN=complexity, windowsize=200*wsize, windowshift=100*wsize)#
	plot(seq(from=1,to=width(dna),length.out=length(test1)),test1,type="l",xlab="nucleotide position along sequence",ylab="DNA sequence complexity",sub="black and red = empirical; blue = random")#
	lines(seq(from=1,to=width(dna),length.out=length(test2)),test2,col="red")#
	lines(seq(from=1,to=width(sim1),length.out=length(test3)),test3,col="blue")#
}
complexityPlot(Psammodynastes.dna[1])
complexity <- function(x,w=2){#
	if(class(x)=="DNAString"){#
		x <- as.character(unlist(x))#
	}#
	if(length(x)>1){#
		stop("Sequences must supplied as a DNAString object or a length 1 DNAStringSet object")#
	}#
	if(class(x)=="DNAStringSet"){#
		x <- as.list(x[1])[[1]]#
	}#
	tempseq <- unlist(strsplit(as.character(unlist(x)),split=""))#
	res     <- length(which(sapply(1:(length(tempseq)-1),function(i){length(unique(tempseq[i:(i+w)]))!=1})))/length(tempseq)#
	res#
}
complexityPlot(Psammodynastes.dna[1])
complexityPlot <- function(dna,wsize=1){#
	dna   <- DNAStringSet(dna)#
	test1 <- wapply(x=dna, FUN=complexity, windowsize=10, windowshift=5)#
	test2 <- wapply(x=dna, FUN=complexity, windowsize=200*wsize, windowshift=100*wsize)#
	sim1  <- DNAStringSet(paste(sample(c("A","C","G","T"),size=width(dna),replace=T),collapse=""))#
	test3 <- wapply(x=sim1, FUN=complexity, windowsize=200*wsize, windowshift=100*wsize)#
	plot(seq(from=1,to=width(dna),length.out=length(test1)),test1,type="l",xlab="nucleotide position along sequence",ylab="DNA sequence complexity",sub="black and red = empirical; blue = random",ylim=c(0,1))#
	lines(seq(from=1,to=width(dna),length.out=length(test2)),test2,col="red")#
	lines(seq(from=1,to=width(sim1),length.out=length(test3)),test3,col="blue")#
}
complexityPlot(Psammodynastes.dna[1])
complexity <- function(x,w=1){#
	if(class(x)=="DNAString"){#
		x <- as.character(unlist(x))#
	}#
	if(length(x)>1){#
		stop("Sequences must supplied as a DNAString object or a length 1 DNAStringSet object")#
	}#
	if(class(x)=="DNAStringSet"){#
		x <- as.list(x[1])[[1]]#
	}#
	tempseq <- unlist(strsplit(as.character(unlist(x)),split=""))#
	res     <- length(which(sapply(1:(length(tempseq)-1),function(i){length(unique(tempseq[i:(i+w)]))!=1})))/length(tempseq)#
	res#
}
complexityPlot(Psammodynastes.dna[1])
complexityPlot(Psammodynastes.dna[6])
complexityPlot(Psammodynastes.dna[7],wsize=10)
complexityPlot(Psammodynastes.dna[7],wsize=10)
complexityPlot(Psammodynastes.dna[7],wsize=10)
complexityPlot(Psammodynastes.dna[8],wsize=10)
complexityPlot(Psammodynastes.dna[9],wsize=10)
complexityPlot(Psammodynastes.dna[10],wsize=10)
complexityPlot(Psammodynastes.dna[10],wsize=5)
complexityPlot(Psammodynastes.dna[10],wsize=4)
repeatScore <- function(x,rp="1.1"){#
	if(class(x)=="DNAString"){#
		x <- as.character(unlist(x))#
	}#
	if(length(x)>1){#
		stop("Sequences must supplied as a DNAString object or a length 1 DNAStringSet object")#
	}#
	if(class(x)=="DNAStringSet"){#
		x <- as.list(x[1])[[1]]#
	}#
	tempseq <- unlist(strsplit(as.character(unlist(x)),split=""))#
	if(rp=="1.1"){#
		res     <- length(which(sapply(1:(length(tempseq)-2),function(i){tempseq[i]==tempseq[i+2]})))/length(tempseq)#
	}#
	res#
}
seq <- "ACACACACACACACACACACACACACACACACA"
repeatScore(seq)
nchar(repearScore)
nchar(seq)
complexity(seq)
complexity <- function(x,w=1){#
	if(class(x)=="DNAString"){#
		x <- as.character(unlist(x))#
	}#
	if(length(x)>1){#
		stop("Sequences must supplied as a DNAString object or a length 1 DNAStringSet object")#
	}#
	if(class(x)=="DNAStringSet"){#
		x <- as.list(x[1])[[1]]#
	}#
	tempseq <- unlist(strsplit(as.character(unlist(x)),split=""))#
	res     <- length(which(sapply(1:(length(tempseq)-1),function(i){length(unique(tempseq[i:(i+w)]))!=1})))/(length(tempseq)-1)#
	res#
}
complexity(seq)
repeatScore(seq)
repeatScore <- function(x,rp="1.1"){#
	if(class(x)=="DNAString"){#
		x <- as.character(unlist(x))#
	}#
	if(length(x)>1){#
		stop("Sequences must supplied as a DNAString object or a length 1 DNAStringSet object")#
	}#
	if(class(x)=="DNAStringSet"){#
		x <- as.list(x[1])[[1]]#
	}#
	tempseq <- unlist(strsplit(as.character(unlist(x)),split=""))#
	if(rp=="1.1"){#
		res     <- length(which(sapply(1:(length(tempseq)-2),function(i){tempseq[i]==tempseq[i+2]})))/(length(tempseq)-2)#
	}#
	res#
}
repeatScore(seq)
repeatScore <- function(x,rp="1.1"){#
	if(class(x)=="DNAString"){#
		x <- as.character(unlist(x))#
	}#
	if(length(x)>1){#
		stop("Sequences must supplied as a DNAString object or a length 1 DNAStringSet object")#
	}#
	if(class(x)=="DNAStringSet"){#
		x <- as.list(x[1])[[1]]#
	}#
	patternWidth=nchar(rp)#
	tempseq <- unlist(strsplit(as.character(unlist(x)),split=""))#
	if(rp=="1.1"){#
		res     <- length(which(sapply(1:(length(tempseq)-2),function(i){tempseq[i]==tempseq[i+2]})))/(length(tempseq)-(patternWidth-1))#
	}#
	res#
}
repeatScore(seq)
rp="1.1"
pattern <- unlist(strsplit(rp,split=""))
pattern
which(pattern==pattern[1])
x=seq
tempseq <- unlist(strsplit(as.character(unlist(x)),split=""))
tempseq
patternWidth <- nchar(rp)#
	pattern      <- unlist(strsplit(rp,split=""))#
	relpattern   <- which(pattern==pattern[1])#
	tempseq      <- unlist(strsplit(as.character(unlist(x)),split=""))
relpattern
i=1
tempseq[relpattern+(i-1)]
repeatScore <- function(x,rp="1.1"){#
	if(class(x)=="DNAString"){#
		x <- as.character(unlist(x))#
	}#
	if(length(x)>1){#
		stop("Sequences must supplied as a DNAString object or a length 1 DNAStringSet object")#
	}#
	if(class(x)=="DNAStringSet"){#
		x <- as.list(x[1])[[1]]#
	}#
	patternWidth <- nchar(rp)#
	pattern      <- unlist(strsplit(rp,split=""))#
	relpattern   <- which(pattern==pattern[1])#
	tempseq      <- unlist(strsplit(as.character(unlist(x)),split=""))#
	res          <- length(which(sapply(1:(length(tempseq)-(patternWidth-1)),function(i){length(unique(tempseq[relpattern+(i-1)]))==1})))/(length(tempseq)-(patternWidth-1))#
	#if(rp=="1.1"){#
	#	res     <- length(which(sapply(1:(length(tempseq)-2),function(i){tempseq[i]==tempseq[i+2]})))/(length(tempseq)-(patternWidth-1))#
	#}#
	res#
}
seq
repeatScore(seq)
repeatScore(seq,rp="1..1")
repeatScore(seq,rp="1...1")
repeatScore(seq,rp="1..11")
seq2 <- sample(x=c("A","C","G","T"),size=100,replace=T)
seq2 <- DNAStringSet(paste(sample(x=c("A","C","G","T"),size=100,replace=T),collapse=""))
seq2
repeatScore(seq2)
repeatScore(seq2,rep="1..1")
repeatScore(seq2,rp="1..1")
repeatScore(seq2,rp="1...1")
repeatScore(seq2,rp="1..11")
#' @title Plot sliding window DNA repeat score#
#'#
#' Plots sequence repeat score for a specified repeat pattern along an input DNA sequence along sliding windows and for a random sequence of the same length.#
#' #
#' Black line shows repeat score of the input DNA sequence for a sliding window with windowsize=10 and windowshift=5#
#' Red line shows repeat score of the indput DNA sequence for a sliding window with windowsize=200 and windowshift=100#
#' Blue line shows repeat score of the randomly generated DNA sequence using a sliding window with windowsize=200 and windowshift=100#
#' Note: I may change this to a ggplot and provide options to control sliding windows#
#' #
#' @param dna Character string, or a DNAString object, or a length 1 DNAStringSet object as defined by the Biostrings package.#
#' @param rp Text string defining that defines how complexity is defined. [AT PRESENT ONLY PATTERNS COMPOSED OF "1" and "." CAN BE USED]. Default is "1.1", which specifies to return the fraction of bases in which base[i] == base[i+2].#
#' @param wsize Number that controls windowsizes; default window sizes of the larger windows (indicated by red and blue lines) are multiplied by this number.#
#' @return NULL#
#' @export repeatScorePlot#
repeatScorePlot <- function(dna,rp="1.1",wsize=1){#
	dna   <- DNAStringSet(dna)#
	test1 <- wapply(x=dna, FUN=function(x){repeatScore(x,rp=rp)}, windowsize=10, windowshift=5)#
	test2 <- wapply(x=dna, FUN=function(x){repeatScore(x,rp=rp)}, windowsize=200*wsize, windowshift=100*wsize)#
	sim1  <- DNAStringSet(paste(sample(c("A","C","G","T"),size=width(dna),replace=T),collapse=""))#
	test3 <- wapply(x=sim1, FUN=function(x){repeatScore(x,rp=rp)}, windowsize=200*wsize, windowshift=100*wsize)#
	plot(seq(from=1,to=width(dna),length.out=length(test1)),test1,type="l",xlab="nucleotide position along sequence",ylab="DNA sequence complexity",sub="black and red = empirical; blue = random",ylim=c(0,1))#
	lines(seq(from=1,to=width(dna),length.out=length(test2)),test2,col="red")#
	lines(seq(from=1,to=width(sim1),length.out=length(test3)),test3,col="blue")#
}
repeatScorePlot(seq)
seq
seq=DNAStringSet("ACACACACACACACACACACACACACACACACA")
seq
seq1=DNAStringSet("ACACACACACACACACACACACACACACACACA")
dna=seq1
rp="1.1"
wsize=1
dna   <- DNAStringSet(dna)
test1 <- wapply(x=dna, FUN=function(x){repeatScore(x,rp=rp)}, windowsize=10, windowshift=5)
test
test2 <- wapply(x=dna, FUN=function(x){repeatScore(x,rp=rp)}, windowsize=200*wsize, windowshift=100*wsize)
length(seq1)
width(dna)
dna
seq1
repeatScorePlot(seq1,wsize=40)
repeatScorePlot(seq1,wsize=0.1)
repeatScorePlot <- function(dna,rp="1.1",wsize=1){#
	dna   <- DNAStringSet(dna)#
	smallwindow <- min( max((width(dna)/100),nchar(rp)),10)#
	smallshift  <- ceiling(smallwindow/2)#
	bigwindow   <- min(max((width(dna)/10),nchar(rp)),50)#
	bigshift    <- bigwindow#
	test1 <- wapply(x=dna, FUN=function(x){repeatScore(x,rp=rp)}, windowsize=smallwindow, windowshift=smallshift)#
	test2 <- wapply(x=dna, FUN=function(x){repeatScore(x,rp=rp)}, windowsize=bigwindow*wsize, windowshift=(bigshift*wsize))#
	sim1  <- DNAStringSet(paste(sample(c("A","C","G","T"),size=width(dna),replace=T),collapse=""))#
	test3 <- wapply(x=sim1, FUN=function(x){repeatScore(x,rp=rp)}, windowsize=bigwindow*wsize, windowshift=(bigshift*wsize))#
	plot(seq(from=1,to=width(dna),length.out=length(test1)),test1,type="l",xlab="nucleotide position along sequence",ylab="DNA sequence complexity",sub="black and red = empirical; blue = random",ylim=c(0,1))#
	lines(seq(from=1,to=width(dna),length.out=length(test2)),test2,col="red")#
	lines(seq(from=1,to=width(sim1),length.out=length(test3)),test3,col="blue")#
}
repeatScorePlot(seq1,wsize=1)
repeatScorePlot <- function(dna,rp="1.1",wsize=1){#
	dna   <- DNAStringSet(dna)#
	smallwindow <- min( max((width(dna)/100),nchar(rp)),10)#
	smallshift  <- ceiling(smallwindow/2)#
	bigwindow   <- min(max((width(dna)/10),nchar(rp)),50)#
	bigshift    <- bigwindow#
	test1 <- wapply(x=dna, FUN=function(x){repeatScore(x,rp=rp)}, windowsize=smallwindow, windowshift=smallshift)#
	test2 <- wapply(x=dna, FUN=function(x){repeatScore(x,rp=rp)}, windowsize=bigwindow*wsize, windowshift=(bigshift*wsize))#
	sim1  <- DNAStringSet(paste(sample(c("A","C","G","T"),size=width(dna),replace=T),collapse=""))#
	test3 <- wapply(x=sim1, FUN=function(x){repeatScore(x,rp=rp)}, windowsize=bigwindow*wsize, windowshift=(bigshift*wsize))#
	plot(seq(from=1,to=width(dna),length.out=length(test1)),test1,type="l",xlab="nucleotide position along sequence",ylab=sprintf("DNA repeat score for pattern %s",rp),sub="black and red = empirical; blue = random",ylim=c(0,1))#
	lines(seq(from=1,to=width(dna),length.out=length(test2)),test2,col="red")#
	lines(seq(from=1,to=width(sim1),length.out=length(test3)),test3,col="blue")#
}
repeatScorePlot(seq1,wsize=1)
repeatScorePlot <- function(dna,rp="1.1",wsize=1){#
	dna   <- DNAStringSet(dna)#
	smallwindow <- min( max((width(dna)/100),nchar(rp)),10)#
	smallshift  <- ceiling(smallwindow/2)#
	bigwindow   <- min(max((width(dna)/10),nchar(rp)),50)#
	bigshift    <- bigwindow#
	test1 <- wapply(x=dna, FUN=function(x){repeatScore(x,rp=rp)}, windowsize=smallwindow, windowshift=smallshift)#
	test2 <- wapply(x=dna, FUN=function(x){repeatScore(x,rp=rp)}, windowsize=bigwindow*wsize, windowshift=(bigshift*wsize))#
	sim1  <- DNAStringSet(paste(sample(c("A","C","G","T"),size=width(dna),replace=T),collapse=""))#
	test3 <- wapply(x=sim1, FUN=function(x){repeatScore(x,rp=rp)}, windowsize=bigwindow*wsize, windowshift=(bigshift*wsize))#
	plot(seq(from=1,to=width(dna),length.out=length(test1)),test1,type="l",xlab="nucleotide position along sequence",ylab=sprintf("DNA repeat score for pattern '%s'",rp),sub="black and red = empirical; blue = random",ylim=c(0,1))#
	lines(seq(from=1,to=width(dna),length.out=length(test2)),test2,col="red")#
	lines(seq(from=1,to=width(sim1),length.out=length(test3)),test3,col="blue")#
}
repeatScorePlot(seq1,wsize=1)
seq1
seq2 <- DNAStringSet(paste(rep("AC",500),collapse=""))
repeatScorePlot(seq2)
repeatScorePlot <- function(dna,rp="1.1",wsize=1){#
	dna   <- DNAStringSet(dna)#
	smallwindow <- min( max((width(dna)/100),nchar(rp)),10)#
	smallshift  <- 1#
	bigwindow   <- min(max((width(dna)/10),nchar(rp)),50)#
	bigshift    <- bigwindow#
	test1 <- wapply(x=dna, FUN=function(x){repeatScore(x,rp=rp)}, windowsize=smallwindow, windowshift=smallshift)#
	test2 <- wapply(x=dna, FUN=function(x){repeatScore(x,rp=rp)}, windowsize=bigwindow*wsize, windowshift=(bigshift*wsize))#
	sim1  <- DNAStringSet(paste(sample(c("A","C","G","T"),size=width(dna),replace=T),collapse=""))#
	test3 <- wapply(x=sim1, FUN=function(x){repeatScore(x,rp=rp)}, windowsize=bigwindow*wsize, windowshift=(bigshift*wsize))#
	plot(seq(from=1,to=width(dna),length.out=length(test1)),test1,type="l",xlab="nucleotide position along sequence",ylab=sprintf("DNA repeat score for pattern '%s'",rp),sub="black and red = empirical; blue = random",ylim=c(0,1))#
	lines(seq(from=1,to=width(dna),length.out=length(test2)),test2,col="red")#
	lines(seq(from=1,to=width(sim1),length.out=length(test3)),test3,col="blue")#
}
repeatScorePlot(seq2)
seq1
c(seq1,seq1)
xscat(seq1,seq1)
xscat(seq1,DNAStringSet(paste(sample(c("A","C","G","T"),1000),collapse="")))
xscat(seq1,DNAStringSet(paste(sample(c("A","C","G","T"),1000,replace=T),collapse="")))
seq3 <- xscat(seq1,DNAStringSet(paste(sample(c("A","C","G","T"),1000,replace=T),collapse="")))
repeatScorePlot(seq3)
test <- read.table('/users/jeff/Downloads/new_taxdump/nodes.dmp',sep="\t\|\t")
test <- read.table('/users/jeff/Downloads/new_taxdump/nodes.dmp',sep="\t|\t")
test <- read.table('/users/jeff/Downloads/new_taxdump/nodes.dmp',sep="|")
repeatScorePlot(seq3)
repeatScorePlot <- function(dna,rp="1.1",wsize=1){#
	dna   <- DNAStringSet(dna)#
	smallwindow <- min( max((width(dna)/100),nchar(rp)),10)#
	smallshift  <- 1#
	bigwindow   <- min(max((width(dna)/10),nchar(rp)),50)#
	bigshift    <- bigwindow#
	test1 <- wapply(x=dna, FUN=function(x){repeatScore(x,rp=rp)}, windowsize=smallwindow, windowshift=smallshift)#
	test2 <- wapply(x=dna, FUN=function(x){repeatScore(x,rp=rp)}, windowsize=bigwindow*wsize, windowshift=(bigshift*wsize))#
	sim1  <- DNAStringSet(paste(sample(c("A","C","G","T"),size=width(dna),replace=T),collapse=""))#
	test3 <- wapply(x=sim1, FUN=function(x){repeatScore(x,rp=rp)}, windowsize=bigwindow*wsize, windowshift=(bigshift*wsize))#
	plot(seq(from=1,to=width(dna),length.out=length(test1)),test1,type="l",xlab="nucleotide position along sequence",ylab=sprintf("DNA repeat score for pattern '%s'",rp),sub="black and red = empirical; blue = random",ylim=c(0,1))#
	lines(seq(from=1,to=width(dna),length.out=length(test2)),test2,col="red")#
	lines(seq(from=1,to=width(sim1),length.out=length(test3)),test3,col="blue")#
	res <- list(scores.smallwindow=test1,scores.bigwindow=test2,sim.scores=test3)#
	res#
}
seq3.plot <- repeatScorePlot(seq3)
seq3.plot[[1]]
seq3.plot[[1]] > 0.75
stringtest <- 0 ; stringtest[seq3.plot[[1]] > 0.75] <- 1; stringtest <- paste(stringtest,collapse="")
stringtest
stringtest <- rep(0,length(seq3.plot[[1]])) ; stringtest[seq3.plot[[1]] > 0.75] <- 1; stringtest <- paste(stringtest,collapse="")
stringtest
summarizeGBmtc <- function(pathGB){#
	mtcGB       <- REEs::read.gb(pathGB,progress=FALSE)#
	features.df <- as.data.frame(do.call(rbind, lapply(X=1:length(mtcGB@features),function(x){ c(product=product(mtcGB@features[x]),gene=geneID(mtcGB@features[x]),start=as.numeric(start(mtcGB@features[x])),end=as.numeric(end(mtcGB@features[x])),sense=strand(mtcGB@features[x]),"strand"=NA,key=mtcGB@features@.Data[[x]]@key)})))#
	features.df$gene[is.na(features.df$gene)] <- gsub("tRNA-","",features.df$product[is.na(features.df$gene)])#
	features.df2      <- features.df[which(!features.df$key %in% c("gene","source")),c("gene","start","end","sense","strand","key")]#
	if(any(is.na(features.df2$gene))){#
		features.df2$gene[which(is.na(features.df2$gene))] <- features.df2$key[which(is.na(features.df2$gene))]#
	}#
	features.df2$gene <- gsub("s-rRNA","12S",features.df2$gene)#
	features.df2$gene <- gsub("l-rRNA","16S",features.df2$gene)#
	features.df2$gene <- gsub(" ribosomal RNA","",features.df2$gene)#
#
	dupGenes <- names(table(features.df2$gene)[which(table(features.df2$gene) > 1)])#
	if(length(dupGenes)>0){#
		for(x in 1:length(dupGenes)){#
			features.df2$gene[which(features.df2$gene==dupGenes[x])] <- paste0(dupGenes[x],"_",1:length(which(features.df2$gene==dupGenes[x])))#
		}#
	}#
#	if(any(features.df2$gene=="misc_feature")){#
#		features.df2$gene[which(features.df2$gene=="misc_feature")] <- paste0("misc_feature_",1:length(which(features.df2$gene=="misc_feature")))#
#	}#
	mode(features.df2$start) <- "numeric"#
	mode(features.df2$end)   <- "numeric"#
	if(nchar(gsub("[A,G]","",getSequence(mtcGB))) < nchar(gsub("[A,G]","",reverseComplement(getSequence(mtcGB))))) {#
		strand1_weight="heavy"#
		heavyStrand=1#
		lightStrand=-1#
	} else {#
		strand1_weight="light"#
		heavyStrand=-1#
		lightStrand=1#
	}#
	features.df2$strand[features.df2$sense==heavyStrand] <- "heavy"#
	features.df2$strand[features.df2$sense==lightStrand] <- "light"#
#
	mtcSummary <- list(organism=mtcGB@features@.Data[[1]]@qualifiers["organism"],organelle=mtcGB@features@.Data[[1]]@qualifiers["organelle"],ntLength=getLength(mtcGB),strands=c(heavy=heavyStrand,light=lightStrand),features=features.df2)#
	mtcSummary#
}
library(misc.wrappers)
test <- summarizeGBmtc("/users/jeff/Downloads/sequence2.gb")
plotGBmtc <- function(pathGB, type="file", additionalDF=NULL, zoomout=1.1, radii=c(lightStrand=1, heavyStrand=0.85), linetypes=c(lightStrand=1,heavyStrand=1, CDS=1,stem_loop=1,misc_feature=1,tRNA=1,rRNA=1), widths=c(lightStrand=1,heavyStrand=2, CDS=4, stem_loop=4, misc_feature=4, tRNA=4, rRNA=4), colors=c(lightStrand="black",heavyStrand="black",CDS="green",stem_loop="orange",misc_feature="yellow",tRNA="purple",rRNA="brown"),textadj=c(heavy=0.95,light=1.04)){#
	if(type=="accession"){#
		accessionGB  <- pathGB#
		subject.path <- tempfile()#
		URL  <- sprintf("https://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=nucleotide&id=%s&rettype=gb&retmode=text",paste(accessionGB,collapse=","))#
		conn <- utils::download.file(url=URL, destfile=subject.path,quiet=T)#
		mtcSummary  <- summarizeGBmtc(subject.path)#
	} else {#
		mtcSummary  <- summarizeGBmtc(pathGB)#
	}#
	features.df <- mtcSummary$features#
	strands.df  <- data.frame(arcname=factor(c("heavyStrand","lightStrand")),arcstart=c(0,0),arcend=c((2*pi),(2*pi)),strand=c("heavy","light"),type="source",radius=radii[c("heavyStrand","lightStrand")],linetype=linetypes[c("heavyStrand","lightStrand")],linecol=colors[c("heavyStrand","lightStrand")],linewidth=widths[c("heavyStrand","lightStrand")])#
	genes.df    <- data.frame(arcname=mtcSummary$features$gene,arcstart=NA,arcend=NA,strand=features.df$strand,type=features.df$key,radius=NA,linetype=NA,linecol=NA,linewidth=NA)#
	genes.df$arcstart <- ((features.df$start/mtcSummary$ntLength)*(2*pi))  # [features.df$strand==1]#
	genes.df$arcend   <- ((features.df$end/mtcSummary$ntLength)*(2*pi))    # [features.df$strand==1]#
	genes.df$radius[genes.df$strand=="heavy"] <- radii["heavyStrand"]#
	genes.df$radius[genes.df$strand=="light"] <- radii["lightStrand"]#
	for(i in 1:length(unique(genes.df$type))){#
		tempType=unique(genes.df$type)[i]#
		### track linetypes#
		if(any(names(linetypes)==tempType)){#
			genes.df$linetype[genes.df$type==tempType] <- linetypes[names(linetypes)==tempType]#
		} else {#
			genes.df$linetype[genes.df$type==tempType] <- 1#
		}#
		### track colors#
		if(any(names(colors)==tempType)){#
			genes.df$linecol[genes.df$type==tempType] <- colors[names(colors)==tempType]#
		} else {#
			genes.df$linecol[genes.df$type==tempType] <- "gray"#
		}#
		### track widths#
		if(any(names(widths)==tempType)){#
			genes.df$linewidth[genes.df$type==tempType] <- widths[names(widths)==tempType]#
		} else {#
			genes.df$linewidth[genes.df$type==tempType] <- widths["CDS"]#
		}#
	}#
	if(is.null(additionalDF)){#
		allArcs.df <- rbind(strands.df,genes.df)#
	} else {#
		allArcs.df <- rbind(strands.df,genes.df,additionalDF)#
	}#
	allArcs.df2 <- allArcs.df#
	allArcs.df2$text <- gsub("^.+Strand$","",allArcs.df$arcname)#
	Hadj <- textadj["heavy"]#
	Ladj <- textadj["light"]#
	allArcs.df2$Xtext <- NA#
	allArcs.df2$Ytext <- NA#
	allArcs.df2$Xtext[allArcs.df2$"strand"=="heavy"] <- (allArcs.df2$radius[allArcs.df2$"strand"=="heavy"]*Hadj)*cos((((allArcs.df2$arcstart[allArcs.df2$"strand"=="heavy"]+allArcs.df2$arcend[allArcs.df2$"strand"=="heavy"])/2)*(-1)+(pi/2)))#
	allArcs.df2$Ytext[allArcs.df2$"strand"=="heavy"] <- (allArcs.df2$radius[allArcs.df2$"strand"=="heavy"]*Hadj)*sin((((allArcs.df2$arcstart[allArcs.df2$"strand"=="heavy"]+allArcs.df2$arcend[allArcs.df2$"strand"=="heavy"])/2)*(-1)+(pi/2)))#
	allArcs.df2$Xtext[allArcs.df2$"strand"=="light"] <- (allArcs.df2$radius[allArcs.df2$"strand"=="light"]*Ladj)*cos((((allArcs.df2$arcstart[allArcs.df2$"strand"=="light"]+allArcs.df2$arcend[allArcs.df2$"strand"=="light"])/2)*(-1)+(pi/2)))#
	allArcs.df2$Ytext[allArcs.df2$"strand"=="light"] <- (allArcs.df2$radius[allArcs.df2$"strand"=="light"]*Ladj)*sin((((allArcs.df2$arcstart[allArcs.df2$"strand"=="light"]+allArcs.df2$arcend[allArcs.df2$"strand"=="light"])/2)*(-1)+(pi/2)))#
	allArcs.df2$quad1or4  <- allArcs.df2$Xtext > 0#
	allArcs.df2$textangle <- ((((allArcs.df2$arcstart+allArcs.df2$arcend)/2)*(-1)+(pi/2)))*(180/pi)#
	allArcs.df2$textangle[!allArcs.df2$quad1or4] <- allArcs.df2$textangle[!allArcs.df2$quad1or4]+180#
	allArcs.df2$texthjust <- "right"#
	allArcs.df2$texthjust[!allArcs.df2$quad1or4 & allArcs.df2$radius==allArcs.df2$radius[allArcs.df2$arcname=="heavyStrand"]] <- "left"#
	allArcs.df2$texthjust[allArcs.df2$quad1or4 & allArcs.df2$radius==allArcs.df2$radius[allArcs.df2$arcname=="lightStrand"]]  <- "left"#
#
	# outerBoundary           <- allArcs.df2[allArcs.df2$arcname=="lightStrand",]#
	# outerBoundary$arcname   <- "outerBoundary"#
	# outerBoundary$linecol   <- "white"#
	# outerBoundary$linewidth <- 0#
	# outerBoundary$radius    <- max(allArcs.df2$radius)*1.1#
	outerBoundary <- data.frame(arcname="outerBoundary", arcstart=0, arcend=2*pi, strand=NA, type=NA, radius=max(allArcs.df2$radius)*zoomout, linetype=1, linecol="white", linewidth=0, text="", Xtext=0, Ytext=0, quad1or4=FALSE, textangle=0, texthjust=0)#
	organism.df   <- data.frame(arcname="organism", arcstart=0, arcend=2*pi, strand=NA, type=NA, radius=max(allArcs.df2$radius)*(zoomout/2), linetype=1, linecol="white", linewidth=0, text=paste0(mtcSummary$organism,"\nmitochondrion"), Xtext=0, Ytext=0, quad1or4=FALSE, textangle=0, texthjust=0)#
	allArcs.df3 <- rbind(allArcs.df2, outerBoundary,organism.df)#
	allArcs.df4 <- allArcs.df3[order(allArcs.df3$radius),]#
	rownames(allArcs.df4) <- 1:nrow(allArcs.df4)#
	allArcs.df4$plotOrder <- 1:nrow(allArcs.df4)#
	allArcs.df4$arcname   <- factor(allArcs.df4$arcname, levels = allArcs.df4$arcname[order(allArcs.df4$plotOrder)])#
	res1 <- ggplot(allArcs.df4) + ggforce::geom_arc(aes(x0 = 0, y0 = 0, r=radius, start = arcstart, end=arcend, size=arcname, color=arcname, linetype=arcname)) + scale_linetype_manual(values=allArcs.df4$linetype,guide="none") + scale_color_manual(values=allArcs.df4$linecol,guide="none") + scale_size_manual(values=allArcs.df4$linewidth, guide="none") + geom_text(aes(x=Xtext,y=Ytext,label=text, angle=textangle, hjust=texthjust), size=2) + theme_void()#
	res1#
	res2 <- allArcs.df4#
	res  <- list(organism=mtcSummary$organism,plot=res1,data=res2)#
	res#
}
test <- plotGBmtc(pathGB="/Users/jeff/Downloads/sequence3.gb")
library(REEs)
library(Biofiles)
library(biofiles)
?product
test <- plotGBmtc(pathGB="/Users/jeff/Downloads/sequence3.gb")
library(ggplot2)
test <- plotGBmtc(pathGB="/Users/jeff/Downloads/sequence3.gb")
plot(test)
test
test <- summarizeGBmtc(pathGB="/Users/jeff/Downloads/sequence3.gb")
test
Trimeresurus.mtc.summary <- summarizeGBmtc(pathGB="/users/jeff/Documents/Trimeresurus-albilabris_mitochondrial-genome_NC_022820.gb")
Trimeresurus.mtc.plot <- plotGBmtc(pathGB="/users/jeff/Documents/Trimeresurus-albilabris_mitochondrial-genome_NC_022820.gb")
Trimeresurus.mtc.plot
Trimeresurus.mtc.gb <- read.gb("/users/jeff/Documents/Trimeresurus-albilabris_mitochondrial-genome_NC_022820.gb")
sequence(Trimeresurus.mtc.gb)
getSequence(Trimeresurus.mtc.gb)
Trimeresurus.mtc.sequence <- getSequence(Trimeresurus.mtc.gb)
names(Trimeresurus.mtc.sequence) <- "Trimeresurus_albolabris"
writeXStringSet(Trimeresurus.mtc.sequence,filepath="users/jeff/Documents/reference.fa")
writeXStringSet(Trimeresurus.mtc.sequence,filepath="/users/jeff/Documents/reference.fa")
?reverseComplement
library(ape)
Trimeresurus.mtc.summary
Trimeresurus.mtc.summary$features
genes <- Trimeresurus.mtc.summary$features
genes$start[1]:genes$end[1]
class(Trimeresurus.mtc.sequence)
DNAString(Trimeresurus.mtc.sequence)
as.DNAString(Trimeresurus.mtc.sequence)
as.character(Trimeresurus.mtc.sequence)
DNAString(as.character(Trimeresurus.mtc.sequence))
DNAString(as.character(Trimeresurus.mtc.sequence))[genes$start[1]:genes$end[1]]
i=1
geneseq <- DNAString(as.character(Trimeresurus.mtc.sequence))[genes$start[i]:genes$end[i]]
geneseq
name(geneseq)
names(geneseq)
genes$gene
names(geneseq) <- genes$gene[i]
attributes(geneseq)
geneseq <- DNAStringSet(DNAString(as.character(Trimeresurus.mtc.sequence))[genes$start[i]:genes$end[i]])
geneseq
names(geneseq) <- genes$gene[i]
geneseq
for(i in 1:nrow(genes)){#
	geneseq <- DNAStringSet(DNAString(as.character(Trimeresurus.mtc.sequence))[genes$start[i]:genes$end[i]])#
	names(geneseq) <- genes$gene[i]#
	if(i==1){#
		allgenes <- geneseq#
	} else {#
		allgenes <- c(allgenes,geneseq)#
	}#
}
allgenes
writeXStringSet(allgenes,"/users/jeff/Documents/mtgenes.fa")
while (seeding == T){#
		#Copy new reference to do recursively#
		counter  <- counter+1#
		prev.len <- new.len#
		# Skips the first one [of???] since its already done.#
		if (counter >= 2){#
			#Pick out matching reads to mt Genomes#
			system(sprintf("'%s' -Xmx8g ref='current_seed.fasta' in1='%s' in2='%s' vslow k=12 minid=%s outm1=t_read1.fq outm2=t_read2.fq",bbmapPATH,referencePATH,read1,read2,min.id),ignore.stderr = T)#
			system(sprintf("'%s' -Xmx8g ref='current_seed.fasta' in='%s' vslow k=12 minid=%s outm=t_singleton.fq",bbmapPATH,referencePATH,reads.merged,min.id), ignore.stderr = T)#
			# concatenates 't_read1.fq' and 'o_read1.fq' and appends to 'read1.fq'#
			system("cat t_read1.fq o_read1.fq >> read1.fq")#
			# concatenates 't_read2.fq' and 'o_read2.fq' and appends to 'read2.fq'#
			system("cat t_read2.fq o_read2.fq >> read2.fq")#
			# concatenates 't_singleton.fq' and 'o_singleton.fq' and appends to 'singleton.fq'#
			system("cat t_singleton.fq o_singleton.fq >> singleton.fq")#
			# removes current 't_read1.fq' 't_read2.fq' and 't_singleton.fq'#
			system("rm t_read1.fq t_read2.fq t_singleton.fq")#
		}#
		# Run SPADES on sample.#
		system(sprintf("'%s' --pe1-1 '%s/read1.fq' --pe1-2 '%s/read2.fq' --pe1-s '%s/singleton.fq' -o spades -k %s --careful -t 8 -m 8",spadesPATH,out.dir,out.dir,out.dir,k.val), ignore.stdout = T)#
		#Checks to see if one kmer failed or not#
		while (file.exists("spades/contigs.fasta") == F){#
			#subtract Ks until it works#
			system("rm -r spades")#
			k <- k[-length(k)]#
			if(length(k) == 0) { break }#
			k.val  <- paste(k, collapse = ",")#
			min.id <- "0.6"#
			system(sprintf("'%s' --pe1-1 '%s/read1.fq' --pe1-2 '%s/read2.fq' --pe1-s '%s/singleton.fq' -o spades -k %s --careful -t 8 -m 8",spadesPATH,out.dir,out.dir,out.dir,k.val), ignore.stdout = T)#
		}#end while#
		# If the k-mers are all run out, therefore nothing can be assembled#
		if (length(k) == 0) { #
			paste("k-mer values all used up, cannot assemble!")#
			system("rm read1.fq read2.fq singleton.fq t_read1.fq t_read2.fq t_singleton.fq o_read1.fq o_read2.fq o_singleton.fq")#
			system("rm -r spades")#
			seeding = F #
		}# end if#
#
		# renames read1.fq and read2.fq to read1.fq and read2.fq#
		if (counter == 1){#
			system("mv read1.fq o_read1.fq")#
			system("mv read2.fq o_read2.fq")#
			system("mv singleton.fq o_singleton.fq")#
		}#
#
		# copies contigs.fasta to current_seed.fasta#
		system("cp spades/contigs.fasta current_seed.fasta")#
		if (counter >= 2) {#
			system("rm read1.fq read2.fq singleton.fq")#
		}#
		system("rm -r spades")#
		reference <- "current_seed.fasta"#
#
		#Check size#
		temp.count <- scan(file = "current_seed.fasta", what = "character")#
		new.len    <- sum(nchar(temp.count[-grep(">", temp.count)]))#
		no.contigs <- length(temp.count[grep(">", temp.count)])#
		print(paste0("iteration ", counter, " complete!"))#
		print(paste0("new length: ", new.len, ". Old length: ", prev.len))#
		if (new.len == prev.len || counter == 20){#
			seeding<-F #
			system("rm o_read1.fq o_read2.fq o_singleton.fq")#
			print(paste("mitogenome complete after ", counter, " iterations!", sep = ""))#
			min.id <- "0.7"#
		}#
#
		#If the file gets too large, its due to repeats#
		if (new.len >= 23000){#
			#runs cap3 to merge similar contigs (pull only clustered contigs out?)#
			system(paste(cap3PATH," current_seed.fasta -z 1 -o 16 -e 11 -s 251", " > ","log.fasta.cap.txt", sep = "")) #
			#Reads in results files#
			temp.assembled <- scanFa(FaFile(paste("current_seed.fasta.cap.contigs", sep = "")))#
			temp.singlets  <- scanFa(FaFile(paste("current_seed.fasta.cap.singlets", sep = "")))#
			keep.singlets  <- temp.singlets[width(temp.singlets) >= 100]#
			final.save     <- append(temp.assembled, keep.singlets)#
			#Writes contigs for cap3#
			write.loci <- as.list(as.character(final.save))#
			write.fasta(sequences = write.loci, names = names(write.loci),"current_seed.fasta", nbchar = 1000000, as.string = T)#
			#Get cap3 files and deletes#
			cap.files  <- list.files(pattern = "", full.names = F, recursive = F)#
			cap.remove <- cap.files[grep(pattern = paste("fasta.cap*.", sep =""), x = cap.files)]#
			system(paste("rm ", paste(cap.remove, collapse = " ") ))#
			min.id <- "0.95"#
			#makes sure this doesnt go on forever and ever#
			repeat.counter<-repeat.counter+1#
			if (repeat.counter >= 5){ #
				print(paste("repeat counter hit 5"))#
				system("rm o_read1.fq o_read2.fq o_singleton.fq")#
				seeding <- F #
			}#
		}#end length > 30,000 if#
	}#end while
get.mitogenome <- function(sampleName,read1,read2,reads.merged,referencePATH,geneFilePATH,out.dir,bbmapPATH="bbmap.sh'",cap3PATH="cap3",spadesPATH="spades.py"){#
	reference <- basename(referencePATH)#
	gene.file <- basename(geneFilePATH)#
	#raw.dir   <- dirname(read1)#
	dir.check.create(out.dir)#
	dir.check.create(file.path(out.dir,"Species_mtGenomes"))#
#
	# Modify permissions to make sure that bbmap, cap3, and spades are executable#
	#system(paste("chmod +x",bbmapPATH))#
	#system(paste("chmod +x",cap3))#
	#system(paste("chmod +x",spades.py))#
#
	#Options#
	options(stringsAsFactors = FALSE)#
	options(warn=2)#
#
	####################################################################
	### Step 1: Gather read data and assemble mitochondrial genomes ####
	####################################################################
#
	setwd(out.dir)#
	#Pick out matching reads to mt Genomes. Output files will be in out.dir#
	system(sprintf("'%s'  -Xmx8g ref='%s' in1='%s' in2='%s' vslow k=12 minid=0.7 outm1=read1.fq outm2=read2.fq",bbmapPATH,referencePATH,read1,read2),ignore.stderr = T)#
	system(sprintf("'%s' -Xmx8g ref='%s' in='%s' vslow k=12 minid=0.7 outm=singleton.fq",bbmapPATH,referencePATH,reads.merged), ignore.stderr = T)#
#
	k     <- c(9,13,21,33,55,77,99,127)#
	k.val <- paste(k, collapse = ",")#
#
	####################################################
	#### Not really sure what all of this is about: ####
	####################################################
	# creates an empty file called "current_seed.fasta" in out.dir#
	system("touch current_seed.fasta")#
#
	# Initial values for the while loop#
	new.len        <- 0#
	counter        <- 0#
	repeat.counter <- 0#
	seeding        <- T#
	min.id         <- "0.7"#
#
	# Running the while loop#
	while (seeding == T){#
		#Copy new reference to do recursively#
		counter  <- counter+1#
		prev.len <- new.len#
		# Skips the first one [of???] since its already done.#
		if (counter >= 2){#
			#Pick out matching reads to mt Genomes#
			system(sprintf("'%s' -Xmx8g ref='current_seed.fasta' in1='%s' in2='%s' vslow k=12 minid=%s outm1=t_read1.fq outm2=t_read2.fq",bbmapPATH,referencePATH,read1,read2,min.id),ignore.stderr = T)#
			system(sprintf("'%s' -Xmx8g ref='current_seed.fasta' in='%s' vslow k=12 minid=%s outm=t_singleton.fq",bbmapPATH,referencePATH,reads.merged,min.id), ignore.stderr = T)#
			# concatenates 't_read1.fq' and 'o_read1.fq' and appends to 'read1.fq'#
			system("cat t_read1.fq o_read1.fq >> read1.fq")#
			# concatenates 't_read2.fq' and 'o_read2.fq' and appends to 'read2.fq'#
			system("cat t_read2.fq o_read2.fq >> read2.fq")#
			# concatenates 't_singleton.fq' and 'o_singleton.fq' and appends to 'singleton.fq'#
			system("cat t_singleton.fq o_singleton.fq >> singleton.fq")#
			# removes current 't_read1.fq' 't_read2.fq' and 't_singleton.fq'#
			system("rm t_read1.fq t_read2.fq t_singleton.fq")#
		}#
		# Run SPADES on sample.#
		system(sprintf("'%s' --pe1-1 '%s/read1.fq' --pe1-2 '%s/read2.fq' --pe1-s '%s/singleton.fq' -o spades -k %s --careful -t 8 -m 8",spadesPATH,out.dir,out.dir,out.dir,k.val), ignore.stdout = T)#
		#Checks to see if one kmer failed or not#
		while (file.exists("spades/contigs.fasta") == F){#
			#subtract Ks until it works#
			system("rm -r spades")#
			k <- k[-length(k)]#
			if(length(k) == 0) { break }#
			k.val  <- paste(k, collapse = ",")#
			min.id <- "0.6"#
			system(sprintf("'%s' --pe1-1 '%s/read1.fq' --pe1-2 '%s/read2.fq' --pe1-s '%s/singleton.fq' -o spades -k %s --careful -t 8 -m 8",spadesPATH,out.dir,out.dir,out.dir,k.val), ignore.stdout = T)#
		}#end while#
		# If the k-mers are all run out, therefore nothing can be assembled#
		if (length(k) == 0) { #
			paste("k-mer values all used up, cannot assemble!")#
			system("rm read1.fq read2.fq singleton.fq t_read1.fq t_read2.fq t_singleton.fq o_read1.fq o_read2.fq o_singleton.fq")#
			system("rm -r spades")#
			seeding = F #
		}# end if#
#
		# renames read1.fq and read2.fq to read1.fq and read2.fq#
		if (counter == 1){#
			system("mv read1.fq o_read1.fq")#
			system("mv read2.fq o_read2.fq")#
			system("mv singleton.fq o_singleton.fq")#
		}#
#
		# copies contigs.fasta to current_seed.fasta#
		system("cp spades/contigs.fasta current_seed.fasta")#
		if (counter >= 2) {#
			system("rm read1.fq read2.fq singleton.fq")#
		}#
		system("rm -r spades")#
		reference <- "current_seed.fasta"#
#
		#Check size#
		temp.count <- scan(file = "current_seed.fasta", what = "character")#
		new.len    <- sum(nchar(temp.count[-grep(">", temp.count)]))#
		no.contigs <- length(temp.count[grep(">", temp.count)])#
		print(paste0("iteration ", counter, " complete!"))#
		print(paste0("new length: ", new.len, ". Old length: ", prev.len))#
		if (new.len == prev.len || counter == 20){#
			seeding<-F #
			system("rm o_read1.fq o_read2.fq o_singleton.fq")#
			print(paste("mitogenome complete after ", counter, " iterations!", sep = ""))#
			min.id <- "0.7"#
		}#
#
		#If the file gets too large, its due to repeats#
		if (new.len >= 23000){#
			#runs cap3 to merge similar contigs (pull only clustered contigs out?)#
			system(paste(cap3PATH," current_seed.fasta -z 1 -o 16 -e 11 -s 251", " > ","log.fasta.cap.txt", sep = "")) #
			#Reads in results files#
			temp.assembled <- scanFa(FaFile(paste("current_seed.fasta.cap.contigs", sep = "")))#
			temp.singlets  <- scanFa(FaFile(paste("current_seed.fasta.cap.singlets", sep = "")))#
			keep.singlets  <- temp.singlets[width(temp.singlets) >= 100]#
			final.save     <- append(temp.assembled, keep.singlets)#
			#Writes contigs for cap3#
			write.loci <- as.list(as.character(final.save))#
			write.fasta(sequences = write.loci, names = names(write.loci),"current_seed.fasta", nbchar = 1000000, as.string = T)#
			#Get cap3 files and deletes#
			cap.files  <- list.files(pattern = "", full.names = F, recursive = F)#
			cap.remove <- cap.files[grep(pattern = paste("fasta.cap*.", sep =""), x = cap.files)]#
			system(paste("rm ", paste(cap.remove, collapse = " ") ))#
			min.id <- "0.95"#
			#makes sure this doesnt go on forever and ever#
			repeat.counter<-repeat.counter+1#
			if (repeat.counter >= 5){ #
				print(paste("repeat counter hit 5"))#
				system("rm o_read1.fq o_read2.fq o_singleton.fq")#
				seeding <- F #
			}#
		}#end length > 30,000 if#
	}#end while#
	### Save finished genome#
	# loads up fasta file#
	contigs <- scanFa(FaFile("current_seed.fasta"))#
	if(length(contigs) > 0){#
		#Trys to merge contigs if there are more than 1#
		if(length(contigs) >= 2){#
			#runs cap3 to merge similar contigs (pull only clustered contigs out?)#
			system(sprintf("'%s' current_seed.fasta -z 1 -o 16 -e 11 -s 251 > log.fasta.cap.txt",cap3PATH))#
			#Reads in results files#
			temp.assembled <- scanFa(FaFile(paste0("current_seed.fasta.cap.contigs")))#
			temp.singlets  <- scanFa(FaFile(paste0("current_seed.fasta.cap.singlets")))#
			keep.singlets  <- temp.singlets[width(temp.singlets) >= 100]#
			contigs        <- append(temp.assembled, keep.singlets)#
			#Get cap3 files and deletes#
			cap.files  <- list.files(pattern = "", full.names = F, recursive = F)#
			cap.remove <- cap.files[grep(pattern = paste("fasta.cap*.", sep =""), x = cap.files)]#
			system(paste("rm ", paste(cap.remove, collapse = " ") ))#
		}#end if#
		if(sum(width(contigs)) <= 1000) { #
			print("less than 1000bp, not enough data to extract")#
			next #
		}#
		#Writes the full mitochondrial genome file#
		system("rm current_seed.fasta")#
		names(contigs)<- paste("sequence_", seq(1:length(contigs)), sep = "")#
		write.loci    <- as.list(as.character(contigs))#
		write.fasta(sequences = write.loci, names = names(write.loci),paste0("Species_mtGenomes/", sampleName, ".fa"), nbchar = 1000000, as.string = T)#
	}#
	system("rm -r ref")#
}
q("no")
