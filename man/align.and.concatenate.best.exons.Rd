% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/makeStatsTable.R
\name{align.and.concatenate.best.exons}
\alias{align.and.concatenate.best.exons}
\title{Align and Concatenate REEs

Takes as input a set of exomes and an input table indicating which loci are the REEs, performs multiple sequence alignment (using mafft) for each REE, and outputs:
(1) An alignments for each REE locus,
(2) The concatenated alignment of REE loci,
(3) The partition file associated with the concatenated locus alignment.

This function is superceded by makeStatsTable.}
\usage{
align.and.concatenate.best.exons(
  input.seqs,
  statsTable.path,
  output.dir,
  species,
  is.primary.exome,
  i.start = 1,
  i.stop = NA
)
}
\arguments{
\item{input.seqs}{Paths to unaligned input sequences, one file per species. These files should be the output files generated by the function get.seqs.from.BlastTable()}

\item{statsTable.path}{Path to the stats table generated by the function makeExomeStatsTable; Example: "stats_data_FastestExonPerGene_best.txt"}

\item{output.dir}{Where to save the (1) the alignments for each locus, (2) the concatenated locus alignment, and (3) the partition file associated with the concatenated locus alignment. Example: "Exomes_TempFolder_3Nov2019/"}

\item{species}{Species names associated with individuals in the alignments.}

\item{is.primary.exome}{Number indicating which exome is the primary exome, i.e., the one that other exomes are aligned to and the one that divergence statistics are calculated against.}

\item{i.start}{First locus to start at. Default is 1.}

\item{i.stop}{Last locus to include. Default is NA, meaning to include all loci from i.start.}
}
\value{
Separate DNA alignments for each locus in the input stats table, a concatenated-locus alignment, and a partition file for the concatenated locus alignment.
}
\description{
Align and Concatenate REEs

Takes as input a set of exomes and an input table indicating which loci are the REEs, performs multiple sequence alignment (using mafft) for each REE, and outputs:
(1) An alignments for each REE locus,
(2) The concatenated alignment of REE loci,
(3) The partition file associated with the concatenated locus alignment.

This function is superceded by makeStatsTable.
}
\examples{

### Load GFF table from NCBI repository.
Thamnophis.sirtalis_GFF.url <- "https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/001/077/635/GCF_001077635.1_Thamnophis_sirtalis-6.0/GCF_001077635.1_Thamnophis_sirtalis-6.0_genomic.gff.gz"
Thamnophis.sirtalis_GFF     <- load.gff(input=Thamnophis.sirtalis_GFF.url,local=F)

# Filter Thamnophis.sirtalis_GFF to only include CDS features with length at least 120bp
Thamnophis.sirtalis_GFF_CDS_longer120bp <- filter.gff(input.gff=Thamnophis.sirtalis_GFF,feature.type="CDS",min.length=120)

### Use get.seqs.from.gff to extract the sequences for the loci in the filtered GFF
Thamnophis.sirtalis_genome.path <- "https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/001/077/635/GCF_001077635.1_Thamnophis_sirtalis-6.0/GCF_001077635.1_Thamnophis_sirtalis-6.0_genomic.fna.gz"
Thamnophis.sirtalis_exome       <- get.seqs.from.gff(input.seqs=Thamnophis.sirtalis_genome.path,input.gff=Thamnophis.sirtalis_GFF_CDS_longer120bp)

### Use tblastx to return up to 50 matches for each of query sequence in a subject sequence database
# Define the query sequences. In this example, query sequences are the first sequences in the Thamnophis sirtalis exome DNAStringSet object.
test.query    <- Thamnophis.sirtalis_exome[1:2]
### Or read from fasta file
test.query    <- readDNAStringSet("/Users/alyssaleinweber/Documents/REES_test_output/Thamnophis.sirtalis_twoExons_testQuery.fas")

# Define which sequences to blast against (subject sequences). In this case, the we provide the URL path to the Crotalus horridus genome (the subject sequences).
Crotalus.horridus.genome_url  <- "https://ftp.ncbi.nlm.nih.gov/genomes/all/GCA/001/625/485/GCA_001625485.1_ASM162548v1/GCA_001625485.1_ASM162548v1_genomic.fna.gz"

# URLs to other example genomes (including the Crotalus.horridus.genome_url just defined) are included in this package and can be accessed with the datasets() function:
datasets(1) ### Prints a list of URLs to whole genomes of 11 snake species and 3 lizard species.

Anolis.carolinensis.genome_url           <- datasets(1)[2,2]
Gekko.japonicus.genome_url               <- datasets(1)[3,2]
Pagona.vitticeps.genome_url              <- datasets(1)[4,2]
Crotalus.mitchellii.genome_url           <- datasets(1)[6,2]
Ophiophagus.hannah.genome_url            <- datasets(1)[7,2]
Pantherophis.guttatus.genome_url         <- datasets(1)[8,2]
Protobothrops.mucrosquamatus.genome_url  <- datasets(1)[9,2]
Python.bivittatus.genome_url             <- datasets(1)[10,2]
Viperus.berus.genome_url                 <- datasets(1)[11,2]

# Running the blast function.
Anolis.carolinensis.50hits          <- blast(method="tblastx",subject=Anolis.carolinensis.genome_url,query=test.query)
Gekko.japonicus.50hits              <- blast(method="tblastx",subject=Gekko.japonicus.genome_url,query=test.query,table.out="/Users/alyssaleinweber/Documents/REES_test_output/Gekko.japonicus_TwoExons.testQuery.tblastx.50hits.txt")
Pagona.vitticeps.50hits             <- blast(method="tblastx",subject=Pagona.vitticeps.genome_url,query=test.query,table.out="/Users/alyssaleinweber/Documents/REES_test_output/Pagona.vitticeps_TwoExons.testQuery.tblastx.50hits.txt")
Crotalus.horridus.50hits            <- blast(method="tblastx",subject=Crotalus.horridus.genome_url,query=test.query)
Crotalus.mitchellii.50hits          <- blast(method="tblastx",subject=Crotalus.mitchellii.genome_url,query=test.query)
Ophiophagus.hannah.50hits           <- blast(method="tblastx",subject=Ophiophagus.hannah.genome_url,query=test.query)
Pantherophis.guttatus.50hits        <- blast(method="tblastx",subject=Pantherophis.guttatus.genome_url,query=test.query)
Protobothrops.mucrosquamatus.50hits <- blast(method="tblastx",subject=Protobothrops.mucrosquamatus.genome_url,query=test.query)
Python.bivittatus.50hits            <- blast(method="tblastx",subject=Python.bivittatus.genome_url,query=test.query)
Viperus.berus.50hits                <- blast(method="tblastx",subject=Viperus.berus.genome_url,query=test.query)

### Filter results to include only the best match for each query sequence
best.hits.Anolis.carolinensis           <- reportBestMatches(Anolis.carolinensis.50hits)
best.hits.Gekko.japonicus               <- reportBestMatches(Gekko.japonicus.50hits,output.table.path="/Users/alyssaleinweber/Documents/REES_test_output/Gekko.japonicus_TwoExons.testQuery.tblastx.best.hits.txt")
best.hits.Pagona.vitticeps              <- reportBestMatches(Pagona.vitticeps.50hits,output.table.path="/Users/alyssaleinweber/Documents/REES_test_output/Pagona.vitticeps_TwoExons.testQuery.tblastx.best.hits.txt")
best.hits.Crotalus.horridus             <- reportBestMatches(Crotalus.horridus.50hits)
best.hits.Crotalus.mitchellii           <- reportBestMatches(Crotalus.mitchellii.50hits)
best.hits.Ophiophagus.hannah            <- reportBestMatches(Ophiophagus.hannah.50hits)
best.hits.Pantherophis.guttatus         <- reportBestMatches(Pantherophis.guttatus.50hits)
best.hits.Protobothrops.mucrosquamatus  <- reportBestMatches(Protobothrops.mucrosquamatus.50hits)
best.hits.Python.bivittatus             <- reportBestMatches(Python.bivittatus.50hits)
best.hits.Viperus.berus                 <- reportBestMatches(Viperus.berus.50hits)

### Extract the subject sequences for the best matches
Crotalus.horridus.best.hits.seqs <- get.seqs.from.blastTable(input.blastTable=best.hits.Crotalus.horridus,input.seqs=Crotalus.horridus.genome_url,output.path="/Users/alyssaleinweber/Documents/REES_test_output/Crotalus.horridus_TwoExons.testQuery.tblastx.best.hits_seqs.fas")
### Same as next line:
Anolis.carolinensis.best.hits.seqs          <- get.seqs.from.blastTable(input.blastTable=best.hits.Anolis.carolinensis,input.seqs=Anolis.carolinensis.genome_url,output.path="/Users/alyssaleinweber/Documents/REES_test_output/Anolis.carolinensis_TwoExons.testQuery.tblastx.best.hits_seqs.fas")
Gekko.japonicus.best.hits.seqs              <- get.seqs.from.blastTable(input.blastTable=best.hits.Gekko.japonicus,input.seqs=Gekko.japonicus.genome_url,output.path="/Users/alyssaleinweber/Documents/REES_test_output/Gekko.japonicus_TwoExons.testQuery.tblastx.best.hits_seqs.fas")
Pagona.vitticeps.best.hits.seqs             <- get.seqs.from.blastTable(input.blastTable=best.hits.Pagona.vitticeps,input.seqs=Pagona.vitticeps.genome_url,output.path="/Users/alyssaleinweber/Documents/REES_test_output/Pagona.vitticeps_TwoExons.testQuery.tblastx.best.hits_seqs.fas")
Crotalus.horridus.best.hits.seqs            <- get.seqs.from.blastTable(input.blastTable=best.hits.Crotalus.horridus,input.seqs="/Users/alyssaleinweber/Documents/genomes/genomes_seqs/GCA_001625485.1_ASM162548v1_genomic.fna.gz",output.path="./Crotalus.horridus_TwoExons.testQuery.tblastx.best.hits_seqs.fas")
Crotalus.mitchellii.best.hits.seqs          <- get.seqs.from.blastTable(input.blastTable=best.hits.Crotalus.mitchellii,input.seqs="/Users/alyssaleinweber/Documents/genomes/genomes_seqs/GCA_000737285.1_CrotMitch1.0_genomic.fna.gz",output.path="./Crotalus.mitchellii_TwoExons.testQuery.tblastx.best.hits_seqs.fas")
Ophiophagus.hannah.best.hits.seqs           <- get.seqs.from.blastTable(input.blastTable=best.hits.Ophiophagus.hannah,input.seqs="https://ftp.ncbi.nlm.nih.gov/genomes/all/GCA/000/516/915/GCA_000516915.1_OphHan1.0/GCA_000516915.1_OphHan1.0_genomic.fna.gz",output.path="./Ophiophagus.hannah_TwoExons.testQuery.tblastx.best.hits_seqs.fas")
Pantherophis.guttatus.best.hits.seqs        <- get.seqs.from.blastTable(input.blastTable=best.hits.Pantherophis.guttatus,input.seqs=Pantherophis.guttatus.genome_url,output.path="./Pantherophis.guttatus_TwoExons.testQuery.tblastx.best.hits_seqs.fas")
Protobothrops.mucrosquamatus.best.hits.seqs <- get.seqs.from.blastTable(input.blastTable=best.hits.Protobothrops.mucrosquamatus,input.seqs=Protobothrops.mucrosquamatus_genome.url,output.path="/Users/alyssaleinweber/Documents/REES_test_output/Protobothrops.mucrosquamatus_TwoExons.testQuery.tblastx.best.hits_seqs.fas")
Python.bivittatus.best.hits.seqs            <- get.seqs.from.blastTable(input.blastTable=best.hits.Python.bivittatus,input.seqs=Python.bivittatus.genome_url,output.path="/Users/alyssaleinweber/Documents/REES_test_output/Python.bivittatus_TwoExons.testQuery.tblastx.best.hits_seqs.fas")
Viperus.berus.best.hits.seqs                <- get.seqs.from.blastTable(input.blastTable=best.hits.Viperus.berus,input.seqs=Viperus.berus.genome_url,output.path="/Users/alyssaleinweber/Documents/REES_test_output/Viperus.berus_TwoExons.testQuery.tblastx.best.hits_seqs.fas")

### Align homologous sequences and make a stats table to summarizing variation in each alignment (one row per aligned locus).
input.seqs.paths <- .... ### paths to the "best.hits.seqs" files
stats.table      <- makeStatsTable(input.seqs=input.seqs.paths,species=species.temp,input.gff=Thamnophis.sirtalis_GFF_CDS_longer120bp,output.path=table.out,alignments.out=alignments.dir,reference.species=10)
}
