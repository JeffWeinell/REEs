% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get.seqs.from.blastTable.R
\name{get.UCEs.from.blastTable}
\alias{get.UCEs.from.blastTable}
\title{Get UCEs From BLAST Table

Extracts the sequences defined in an input table (a blast table with NCBI format 6) from an input genome. The input genome should be the same genome used as the subject in the blast table.
If the query sequences in the blast table correspond to Ultraconserved Elements (UCEs), then the output is the UCEs of the species with input genome.
The quality of the output UCE dataset depends on the quality/completeness of the blast search.}
\usage{
get.UCEs.from.blastTable(genome.filepath, input.blastTable, output.path)
}
\arguments{
\item{genome.filepath}{Path to the input genome.}

\item{input.blastTable}{Path to the blast table containing best matches to query UCE sequences (from another species or individual) found in the input genome. This input table is the output of the reportBestMatches function.}

\item{output.path}{Where to save the UCEs.}
}
\value{
UCE sequences (or any extracted sequences of interest) written to a file in fasta format.
}
\description{
Get UCEs From BLAST Table

Extracts the sequences defined in an input table (a blast table with NCBI format 6) from an input genome. The input genome should be the same genome used as the subject in the blast table.
If the query sequences in the blast table correspond to Ultraconserved Elements (UCEs), then the output is the UCEs of the species with input genome.
The quality of the output UCE dataset depends on the quality/completeness of the blast search.
}
\examples{

### Load GFF table from NCBI repository.
Thamnophis.sirtalis_GFF.url <- "https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/001/077/635/GCF_001077635.1_Thamnophis_sirtalis-6.0/GCF_001077635.1_Thamnophis_sirtalis-6.0_genomic.gff.gz"
Thamnophis.sirtalis_GFF     <- load.gff(input=Thamnophis.sirtalis_GFF.url,local=F)

# Filter Thamnophis.sirtalis_GFF to only include CDS features with length at least 120bp
Thamnophis.sirtalis_GFF_CDS_longer120bp <- filter.gff(input.gff=Thamnophis.sirtalis_GFF,feature.type="CDS",min.length=120)

### Use get.exome.from.annotationTable to extract the sequences for the loci in the filtered GFF
Thamnophis.sirtalis_genome.path <- "https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/001/077/635/GCF_001077635.1_Thamnophis_sirtalis-6.0/GCF_001077635.1_Thamnophis_sirtalis-6.0_genomic.fna.gz"
Thamnophis.sirtalis_exome <- get.seqs.from.gff(input.seqs=Thamnophis.sirtalis_genome.path,input.gff=Thamnophis.sirtalis_GFF_CDS_longer120bp)

### Use tblastx to return up to 50 matches for each of query sequence in a subject sequence database
# Define the query sequences. In this example, query sequences are the first sequences in the Thamnophis sirtalis exome DNAStringSet object.
test.query    <- Thamnophis.sirtalis_exome[1:2]

# Define which sequences to blast against (subject sequences). In this case, the we provide the URL path to the Crotalus horridus genome (the subject sequences).
Crotalus.horridus.genome_url  <- "https://ftp.ncbi.nlm.nih.gov/genomes/all/GCA/001/625/485/GCA_001625485.1_ASM162548v1/GCA_001625485.1_ASM162548v1_genomic.fna.gz"

# URLs to other example genomes (including the Crotalus.horridus.genome_url just defined) are included in this package and can be accessed with the datasets() function:
datasets(1) ### Prints a list of URLs to whole genomes of 11 snake species and 3 lizard species.

Anolis.carolinensis.genome_url           <- datasets(1)[2,2]
Gekko.japonicus.genome_url               <- datasets(1)[3,2]
Pagona.vitticeps.genome_url              <- datasets(1)[4,2]
Crotalus.mitchellii.genome_url           <- datasets(1)[6,2]
Ophiophagus.hannah.genome_url            <- datasets(1)[7,2]
Pantherophis.guttatus.genome_url         <- datasets(1)[8,2]
Protobothrops.mucrosquamatus.genome_url  <- datasets(1)[9,2]
Python.bivittatus.genome_url             <- datasets(1)[10,2]
Viperus.berus.genome_url                 <- datasets(1)[11,2]

# Running the blast function.
Anolis.carolinensis.50hits          <- blast(method="tblastx",subject=Anolis.carolinensis.genome_url,query=test.query)
Gekko.japonicus.50hits              <- blast(method="tblastx",subject=Gekko.japonicus.genome_url,query=test.query)
Pagona.vitticeps.50hits             <- blast(method="tblastx",subject=Pagona.vitticeps.genome_url,query=test.query)
Crotalus.horridus.50hits            <- blast(method="tblastx",subject=Crotalus.horridus.genome_url,query=test.query)
Crotalus.mitchellii.50hits          <- blast(method="tblastx",subject=Crotalus.mitchellii.genome_url,query=test.query)
Ophiophagus.hannah.50hits           <- blast(method="tblastx",subject=Ophiophagus.hannah.genome_url,query=test.query)
Pantherophis.guttatus.50hits        <- blast(method="tblastx",subject=Pantherophis.guttatus.genome_url,query=test.query)
Protobothrops.mucrosquamatus.50hits <- blast(method="tblastx",subject=Protobothrops.mucrosquamatus.genome_url,query=test.query)
Python.bivittatus.50hits            <- blast(method="tblastx",subject=Python.bivittatus.genome_url,query=test.query)
Viperus.berus.50hits                <- blast(method="tblastx",subject=Viperus.berus.genome_url,query=test.query)
### Filter results to include only the best match for each query sequence
best.hits.Crotalus.horridus      <- reportBestMatches(Crotalus.horridus.50hits)
best.hits.Crotalus.mitchellii    <- reportBestMatches(Crotalus.mitchellii.50hits)
best.hits.Ophiophagus.hannah     <- reportBestMatches(Ophiophagus.hannah.50hits)
best.hits.Pantherophis.guttatus  <- reportBestMatches(Pantherophis.guttatus.50hits)

### Extract the subject sequences for the best matches
Crotalus.horridus.best.hits.seqs   <- get.seqs.from.blastTable(input.blastTable=best.hits.Crotalus.horridus,input.seqs=Crotalus.horridus.genome_url,output.path="/Users/alyssaleinweber/Documents/REES_test_output/Crotalus.horridus_TwoExons.testQuery.tblastx.best.hits_seqs.fas")
### Same as next line:
Crotalus.horridus.best.hits.seqs   <- get.seqs.from.blastTable(input.blastTable=best.hits.Crotalus.horridus,input.seqs="/Users/alyssaleinweber/Documents/genomes/genomes_seqs/GCA_001625485.1_ASM162548v1_genomic.fna.gz",output.path="/Users/alyssaleinweber/Documents/REES_test_output/Crotalus.horridus_TwoExons.testQuery.tblastx.best.hits_seqs.fas")
Crotalus.mitchellii.best.hits.seqs <- get.seqs.from.blastTable(input.blastTable=best.hits.Crotalus.mitchellii,input.seqs="/Users/alyssaleinweber/Documents/genomes/genomes_seqs/GCA_000737285.1_CrotMitch1.0_genomic.fna.gz",output.path="/Users/alyssaleinweber/Documents/REES_test_output/Crotalus.mitchellii_TwoExons.testQuery.tblastx.best.hits_seqs.fas")
Ophiophagus.hannah.best.hits.seqs  <- get.seqs.from.blastTable(input.blastTable=best.hits.Ophiophagus.hannah,input.seqs="https://ftp.ncbi.nlm.nih.gov/genomes/all/GCA/000/516/915/GCA_000516915.1_OphHan1.0/GCA_000516915.1_OphHan1.0_genomic.fna.gz",output.path="/Users/alyssaleinweber/Documents/REES_test_output/Ophiophagus.hannah_TwoExons.testQuery.tblastx.best.hits_seqs.fas")
Pantherophis.best.hits.seqs        <- get.seqs.from.blastTable(input.blastTable=best.hits.Pantherophis.guttatus,input.seqs=Pantherophis.guttatus.genome_url,output.path="/Users/alyssaleinweber/Documents/REES_test_output/Pantherophis.guttatus_TwoExons.testQuery.tblastx.best.hits_seqs.fas")
}
